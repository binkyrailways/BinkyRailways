// Copyright 2021 Ewout Prangsma
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author Ewout Prangsma
//

syntax = "proto3";

package binkyrailways.v1;

option go_package = "github.com/binkyrailways/BinkyRailways/pkg/api/v1";

import "br_state_types.proto";
import "br_model_types.proto";

// StateService is used to get & modify the running state of the current
// railway.
service StateService {
  // Gets the current railway state
  rpc GetRailwayState(Empty) returns (RailwayState);

  // Enable the run mode of the process.
  rpc EnableRunMode(EnableRunModeRequest) returns (RailwayState);
  // Disable the run mode of the process, switching back to edit mode.
  rpc DisableRunMode(Empty) returns (RailwayState);

  // Fetch state changes when they happen
  rpc GetStateChanges(GetStateChangesRequest) returns (stream StateChange);
}

// Request arguments for EnableRunMode.
message EnableRunModeRequest {
  // If set, run in virtual mode, otherwise live mode.
  bool virtual = 1;
}

// Request arguments for GetStateChanges.
message GetStateChangesRequest {
  // If set, all state objects will be send to the stream before state changes
  // are passed.
  bool bootstrap = 1;
}

// State change of a single object.
// Only one of the fields is set;
message StateChange {
  RailwayState railway = 1;
  BlockState block = 2;
  LocState loc = 3;
}