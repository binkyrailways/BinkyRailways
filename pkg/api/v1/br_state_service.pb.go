// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: br_state_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request arguments for EnableRunMode.
type EnableRunModeRequest struct {
	// If set, run in virtual mode, otherwise live mode.
	Virtual bool `protobuf:"varint,1,opt,name=virtual,proto3" json:"virtual,omitempty"`
	// If set, automatic running is enabled.
	AutoRun              bool     `protobuf:"varint,2,opt,name=auto_run,json=autoRun,proto3" json:"auto_run,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableRunModeRequest) Reset()         { *m = EnableRunModeRequest{} }
func (m *EnableRunModeRequest) String() string { return proto.CompactTextString(m) }
func (*EnableRunModeRequest) ProtoMessage()    {}
func (*EnableRunModeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{0}
}
func (m *EnableRunModeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableRunModeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnableRunModeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnableRunModeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableRunModeRequest.Merge(m, src)
}
func (m *EnableRunModeRequest) XXX_Size() int {
	return m.Size()
}
func (m *EnableRunModeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableRunModeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnableRunModeRequest proto.InternalMessageInfo

func (m *EnableRunModeRequest) GetVirtual() bool {
	if m != nil {
		return m.Virtual
	}
	return false
}

func (m *EnableRunModeRequest) GetAutoRun() bool {
	if m != nil {
		return m.AutoRun
	}
	return false
}

// Request arguments for GetStateChanges.
type GetStateChangesRequest struct {
	Hashes               map[string]string `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetStateChangesRequest) Reset()         { *m = GetStateChangesRequest{} }
func (m *GetStateChangesRequest) String() string { return proto.CompactTextString(m) }
func (*GetStateChangesRequest) ProtoMessage()    {}
func (*GetStateChangesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{1}
}
func (m *GetStateChangesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStateChangesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStateChangesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStateChangesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStateChangesRequest.Merge(m, src)
}
func (m *GetStateChangesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStateChangesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStateChangesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStateChangesRequest proto.InternalMessageInfo

func (m *GetStateChangesRequest) GetHashes() map[string]string {
	if m != nil {
		return m.Hashes
	}
	return nil
}

// State change of a single object.
// Only one of the fields is set;
type StateChange struct {
	Railway              *RailwayState        `protobuf:"bytes,1,opt,name=railway,proto3" json:"railway,omitempty"`
	Loc                  *LocState            `protobuf:"bytes,2,opt,name=loc,proto3" json:"loc,omitempty"`
	CommandStation       *CommandStationState `protobuf:"bytes,3,opt,name=commandStation,proto3" json:"commandStation,omitempty"`
	Block                *BlockState          `protobuf:"bytes,4,opt,name=block,proto3" json:"block,omitempty"`
	BlockGroup           *BlockGroupState     `protobuf:"bytes,5,opt,name=blockGroup,proto3" json:"blockGroup,omitempty"`
	Junction             *JunctionState       `protobuf:"bytes,6,opt,name=junction,proto3" json:"junction,omitempty"`
	Output               *OutputState         `protobuf:"bytes,7,opt,name=output,proto3" json:"output,omitempty"`
	Route                *RouteState          `protobuf:"bytes,8,opt,name=route,proto3" json:"route,omitempty"`
	Sensor               *SensorState         `protobuf:"bytes,9,opt,name=sensor,proto3" json:"sensor,omitempty"`
	Signal               *SignalState         `protobuf:"bytes,10,opt,name=signal,proto3" json:"signal,omitempty"`
	Id                   string               `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Hash                 string               `protobuf:"bytes,101,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *StateChange) Reset()         { *m = StateChange{} }
func (m *StateChange) String() string { return proto.CompactTextString(m) }
func (*StateChange) ProtoMessage()    {}
func (*StateChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{2}
}
func (m *StateChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateChange.Merge(m, src)
}
func (m *StateChange) XXX_Size() int {
	return m.Size()
}
func (m *StateChange) XXX_DiscardUnknown() {
	xxx_messageInfo_StateChange.DiscardUnknown(m)
}

var xxx_messageInfo_StateChange proto.InternalMessageInfo

func (m *StateChange) GetRailway() *RailwayState {
	if m != nil {
		return m.Railway
	}
	return nil
}

func (m *StateChange) GetLoc() *LocState {
	if m != nil {
		return m.Loc
	}
	return nil
}

func (m *StateChange) GetCommandStation() *CommandStationState {
	if m != nil {
		return m.CommandStation
	}
	return nil
}

func (m *StateChange) GetBlock() *BlockState {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *StateChange) GetBlockGroup() *BlockGroupState {
	if m != nil {
		return m.BlockGroup
	}
	return nil
}

func (m *StateChange) GetJunction() *JunctionState {
	if m != nil {
		return m.Junction
	}
	return nil
}

func (m *StateChange) GetOutput() *OutputState {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *StateChange) GetRoute() *RouteState {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *StateChange) GetSensor() *SensorState {
	if m != nil {
		return m.Sensor
	}
	return nil
}

func (m *StateChange) GetSignal() *SignalState {
	if m != nil {
		return m.Signal
	}
	return nil
}

func (m *StateChange) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StateChange) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type SetPowerRequest struct {
	// Is set, power will be turned on, otherwise power will be turned off.
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetPowerRequest) Reset()         { *m = SetPowerRequest{} }
func (m *SetPowerRequest) String() string { return proto.CompactTextString(m) }
func (*SetPowerRequest) ProtoMessage()    {}
func (*SetPowerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{3}
}
func (m *SetPowerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetPowerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetPowerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetPowerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPowerRequest.Merge(m, src)
}
func (m *SetPowerRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetPowerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPowerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetPowerRequest proto.InternalMessageInfo

func (m *SetPowerRequest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type SetAutomaticControlRequest struct {
	// If set, automatic control will be turned on, otherwise it will be turned
	// off.
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetAutomaticControlRequest) Reset()         { *m = SetAutomaticControlRequest{} }
func (m *SetAutomaticControlRequest) String() string { return proto.CompactTextString(m) }
func (*SetAutomaticControlRequest) ProtoMessage()    {}
func (*SetAutomaticControlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{4}
}
func (m *SetAutomaticControlRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetAutomaticControlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetAutomaticControlRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetAutomaticControlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetAutomaticControlRequest.Merge(m, src)
}
func (m *SetAutomaticControlRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetAutomaticControlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetAutomaticControlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetAutomaticControlRequest proto.InternalMessageInfo

func (m *SetAutomaticControlRequest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type SetLocSpeedAndDirectionRequest struct {
	// ID of the loc
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// New speed of the loc
	Speed int32 `protobuf:"varint,2,opt,name=speed,proto3" json:"speed,omitempty"`
	// New direction of the loc
	Direction            LocDirection `protobuf:"varint,3,opt,name=direction,proto3,enum=binkyrailways.v1.LocDirection" json:"direction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SetLocSpeedAndDirectionRequest) Reset()         { *m = SetLocSpeedAndDirectionRequest{} }
func (m *SetLocSpeedAndDirectionRequest) String() string { return proto.CompactTextString(m) }
func (*SetLocSpeedAndDirectionRequest) ProtoMessage()    {}
func (*SetLocSpeedAndDirectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{5}
}
func (m *SetLocSpeedAndDirectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetLocSpeedAndDirectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetLocSpeedAndDirectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetLocSpeedAndDirectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetLocSpeedAndDirectionRequest.Merge(m, src)
}
func (m *SetLocSpeedAndDirectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetLocSpeedAndDirectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetLocSpeedAndDirectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetLocSpeedAndDirectionRequest proto.InternalMessageInfo

func (m *SetLocSpeedAndDirectionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SetLocSpeedAndDirectionRequest) GetSpeed() int32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *SetLocSpeedAndDirectionRequest) GetDirection() LocDirection {
	if m != nil {
		return m.Direction
	}
	return LocDirection_FORWARD
}

type SetLocControlledAutomaticallyRequest struct {
	// ID of the loc
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Enable/disable automatic control of this loc
	Enabled              bool     `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetLocControlledAutomaticallyRequest) Reset()         { *m = SetLocControlledAutomaticallyRequest{} }
func (m *SetLocControlledAutomaticallyRequest) String() string { return proto.CompactTextString(m) }
func (*SetLocControlledAutomaticallyRequest) ProtoMessage()    {}
func (*SetLocControlledAutomaticallyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{6}
}
func (m *SetLocControlledAutomaticallyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetLocControlledAutomaticallyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetLocControlledAutomaticallyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetLocControlledAutomaticallyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetLocControlledAutomaticallyRequest.Merge(m, src)
}
func (m *SetLocControlledAutomaticallyRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetLocControlledAutomaticallyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetLocControlledAutomaticallyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetLocControlledAutomaticallyRequest proto.InternalMessageInfo

func (m *SetLocControlledAutomaticallyRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SetLocControlledAutomaticallyRequest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type SetLocFunctionsRequest struct {
	// ID of the loc
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Functions to set
	Functions            []*LocFunction `protobuf:"bytes,2,rep,name=functions,proto3" json:"functions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SetLocFunctionsRequest) Reset()         { *m = SetLocFunctionsRequest{} }
func (m *SetLocFunctionsRequest) String() string { return proto.CompactTextString(m) }
func (*SetLocFunctionsRequest) ProtoMessage()    {}
func (*SetLocFunctionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{7}
}
func (m *SetLocFunctionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetLocFunctionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetLocFunctionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetLocFunctionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetLocFunctionsRequest.Merge(m, src)
}
func (m *SetLocFunctionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetLocFunctionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetLocFunctionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetLocFunctionsRequest proto.InternalMessageInfo

func (m *SetLocFunctionsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SetLocFunctionsRequest) GetFunctions() []*LocFunction {
	if m != nil {
		return m.Functions
	}
	return nil
}

type LocFunction struct {
	// Function number (0...)
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Value for the function
	Value                bool     `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocFunction) Reset()         { *m = LocFunction{} }
func (m *LocFunction) String() string { return proto.CompactTextString(m) }
func (*LocFunction) ProtoMessage()    {}
func (*LocFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{8}
}
func (m *LocFunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocFunction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocFunction.Merge(m, src)
}
func (m *LocFunction) XXX_Size() int {
	return m.Size()
}
func (m *LocFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_LocFunction.DiscardUnknown(m)
}

var xxx_messageInfo_LocFunction proto.InternalMessageInfo

func (m *LocFunction) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LocFunction) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type SetSwitchDirectionRequest struct {
	// ID of the junction (of type switch)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// New direction of the switch
	Direction            SwitchDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=binkyrailways.v1.SwitchDirection" json:"direction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SetSwitchDirectionRequest) Reset()         { *m = SetSwitchDirectionRequest{} }
func (m *SetSwitchDirectionRequest) String() string { return proto.CompactTextString(m) }
func (*SetSwitchDirectionRequest) ProtoMessage()    {}
func (*SetSwitchDirectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{9}
}
func (m *SetSwitchDirectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetSwitchDirectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetSwitchDirectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetSwitchDirectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSwitchDirectionRequest.Merge(m, src)
}
func (m *SetSwitchDirectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetSwitchDirectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSwitchDirectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetSwitchDirectionRequest proto.InternalMessageInfo

func (m *SetSwitchDirectionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SetSwitchDirectionRequest) GetDirection() SwitchDirection {
	if m != nil {
		return m.Direction
	}
	return SwitchDirection_STRAIGHT
}

type SetBinaryOutputActiveRequest struct {
	// ID of the output (of type binary output)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Request active state
	Active               bool     `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetBinaryOutputActiveRequest) Reset()         { *m = SetBinaryOutputActiveRequest{} }
func (m *SetBinaryOutputActiveRequest) String() string { return proto.CompactTextString(m) }
func (*SetBinaryOutputActiveRequest) ProtoMessage()    {}
func (*SetBinaryOutputActiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{10}
}
func (m *SetBinaryOutputActiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetBinaryOutputActiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetBinaryOutputActiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetBinaryOutputActiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBinaryOutputActiveRequest.Merge(m, src)
}
func (m *SetBinaryOutputActiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetBinaryOutputActiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBinaryOutputActiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetBinaryOutputActiveRequest proto.InternalMessageInfo

func (m *SetBinaryOutputActiveRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SetBinaryOutputActiveRequest) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type ClickVirtualSensorRequest struct {
	// ID of the sensor
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickVirtualSensorRequest) Reset()         { *m = ClickVirtualSensorRequest{} }
func (m *ClickVirtualSensorRequest) String() string { return proto.CompactTextString(m) }
func (*ClickVirtualSensorRequest) ProtoMessage()    {}
func (*ClickVirtualSensorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{11}
}
func (m *ClickVirtualSensorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClickVirtualSensorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClickVirtualSensorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClickVirtualSensorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickVirtualSensorRequest.Merge(m, src)
}
func (m *ClickVirtualSensorRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClickVirtualSensorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickVirtualSensorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClickVirtualSensorRequest proto.InternalMessageInfo

func (m *ClickVirtualSensorRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AssignLocToBlockRequest struct {
	// ID of loc to assign
	LocId string `protobuf:"bytes,1,opt,name=loc_id,json=locId,proto3" json:"loc_id,omitempty"`
	// ID of block to assign to
	BlockId string `protobuf:"bytes,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	// Side of the block that the loc is facing
	BlockSide            BlockSide `protobuf:"varint,3,opt,name=block_side,json=blockSide,proto3,enum=binkyrailways.v1.BlockSide" json:"block_side,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AssignLocToBlockRequest) Reset()         { *m = AssignLocToBlockRequest{} }
func (m *AssignLocToBlockRequest) String() string { return proto.CompactTextString(m) }
func (*AssignLocToBlockRequest) ProtoMessage()    {}
func (*AssignLocToBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{12}
}
func (m *AssignLocToBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignLocToBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignLocToBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignLocToBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignLocToBlockRequest.Merge(m, src)
}
func (m *AssignLocToBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *AssignLocToBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignLocToBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssignLocToBlockRequest proto.InternalMessageInfo

func (m *AssignLocToBlockRequest) GetLocId() string {
	if m != nil {
		return m.LocId
	}
	return ""
}

func (m *AssignLocToBlockRequest) GetBlockId() string {
	if m != nil {
		return m.BlockId
	}
	return ""
}

func (m *AssignLocToBlockRequest) GetBlockSide() BlockSide {
	if m != nil {
		return m.BlockSide
	}
	return BlockSide_FRONT
}

type PutLocOnTrackRequest struct {
	// ID of loc to put on the track
	LocId                string   `protobuf:"bytes,1,opt,name=loc_id,json=locId,proto3" json:"loc_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutLocOnTrackRequest) Reset()         { *m = PutLocOnTrackRequest{} }
func (m *PutLocOnTrackRequest) String() string { return proto.CompactTextString(m) }
func (*PutLocOnTrackRequest) ProtoMessage()    {}
func (*PutLocOnTrackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{13}
}
func (m *PutLocOnTrackRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutLocOnTrackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutLocOnTrackRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutLocOnTrackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutLocOnTrackRequest.Merge(m, src)
}
func (m *PutLocOnTrackRequest) XXX_Size() int {
	return m.Size()
}
func (m *PutLocOnTrackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutLocOnTrackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutLocOnTrackRequest proto.InternalMessageInfo

func (m *PutLocOnTrackRequest) GetLocId() string {
	if m != nil {
		return m.LocId
	}
	return ""
}

type TakeLocOfTrackRequest struct {
	// ID of loc to take of the track
	LocId                string   `protobuf:"bytes,1,opt,name=loc_id,json=locId,proto3" json:"loc_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TakeLocOfTrackRequest) Reset()         { *m = TakeLocOfTrackRequest{} }
func (m *TakeLocOfTrackRequest) String() string { return proto.CompactTextString(m) }
func (*TakeLocOfTrackRequest) ProtoMessage()    {}
func (*TakeLocOfTrackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{14}
}
func (m *TakeLocOfTrackRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TakeLocOfTrackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TakeLocOfTrackRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TakeLocOfTrackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TakeLocOfTrackRequest.Merge(m, src)
}
func (m *TakeLocOfTrackRequest) XXX_Size() int {
	return m.Size()
}
func (m *TakeLocOfTrackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TakeLocOfTrackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TakeLocOfTrackRequest proto.InternalMessageInfo

func (m *TakeLocOfTrackRequest) GetLocId() string {
	if m != nil {
		return m.LocId
	}
	return ""
}

type SetBlockClosedRequest struct {
	// ID of the block
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Requested closed status
	Closed               bool     `protobuf:"varint,2,opt,name=closed,proto3" json:"closed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetBlockClosedRequest) Reset()         { *m = SetBlockClosedRequest{} }
func (m *SetBlockClosedRequest) String() string { return proto.CompactTextString(m) }
func (*SetBlockClosedRequest) ProtoMessage()    {}
func (*SetBlockClosedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{15}
}
func (m *SetBlockClosedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetBlockClosedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetBlockClosedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetBlockClosedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBlockClosedRequest.Merge(m, src)
}
func (m *SetBlockClosedRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetBlockClosedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBlockClosedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetBlockClosedRequest proto.InternalMessageInfo

func (m *SetBlockClosedRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SetBlockClosedRequest) GetClosed() bool {
	if m != nil {
		return m.Closed
	}
	return false
}

type DiscoverHardwareRequest struct {
	// ID of the hardware module to trigger discovery on.
	HardwareModuleId     string   `protobuf:"bytes,1,opt,name=hardware_module_id,json=hardwareModuleId,proto3" json:"hardware_module_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoverHardwareRequest) Reset()         { *m = DiscoverHardwareRequest{} }
func (m *DiscoverHardwareRequest) String() string { return proto.CompactTextString(m) }
func (*DiscoverHardwareRequest) ProtoMessage()    {}
func (*DiscoverHardwareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{16}
}
func (m *DiscoverHardwareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoverHardwareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoverHardwareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoverHardwareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverHardwareRequest.Merge(m, src)
}
func (m *DiscoverHardwareRequest) XXX_Size() int {
	return m.Size()
}
func (m *DiscoverHardwareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverHardwareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverHardwareRequest proto.InternalMessageInfo

func (m *DiscoverHardwareRequest) GetHardwareModuleId() string {
	if m != nil {
		return m.HardwareModuleId
	}
	return ""
}

type DiscoverHardwareResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoverHardwareResponse) Reset()         { *m = DiscoverHardwareResponse{} }
func (m *DiscoverHardwareResponse) String() string { return proto.CompactTextString(m) }
func (*DiscoverHardwareResponse) ProtoMessage()    {}
func (*DiscoverHardwareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{17}
}
func (m *DiscoverHardwareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoverHardwareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoverHardwareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoverHardwareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverHardwareResponse.Merge(m, src)
}
func (m *DiscoverHardwareResponse) XXX_Size() int {
	return m.Size()
}
func (m *DiscoverHardwareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverHardwareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverHardwareResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EnableRunModeRequest)(nil), "binkyrailways.v1.EnableRunModeRequest")
	proto.RegisterType((*GetStateChangesRequest)(nil), "binkyrailways.v1.GetStateChangesRequest")
	proto.RegisterMapType((map[string]string)(nil), "binkyrailways.v1.GetStateChangesRequest.HashesEntry")
	proto.RegisterType((*StateChange)(nil), "binkyrailways.v1.StateChange")
	proto.RegisterType((*SetPowerRequest)(nil), "binkyrailways.v1.SetPowerRequest")
	proto.RegisterType((*SetAutomaticControlRequest)(nil), "binkyrailways.v1.SetAutomaticControlRequest")
	proto.RegisterType((*SetLocSpeedAndDirectionRequest)(nil), "binkyrailways.v1.SetLocSpeedAndDirectionRequest")
	proto.RegisterType((*SetLocControlledAutomaticallyRequest)(nil), "binkyrailways.v1.SetLocControlledAutomaticallyRequest")
	proto.RegisterType((*SetLocFunctionsRequest)(nil), "binkyrailways.v1.SetLocFunctionsRequest")
	proto.RegisterType((*LocFunction)(nil), "binkyrailways.v1.LocFunction")
	proto.RegisterType((*SetSwitchDirectionRequest)(nil), "binkyrailways.v1.SetSwitchDirectionRequest")
	proto.RegisterType((*SetBinaryOutputActiveRequest)(nil), "binkyrailways.v1.SetBinaryOutputActiveRequest")
	proto.RegisterType((*ClickVirtualSensorRequest)(nil), "binkyrailways.v1.ClickVirtualSensorRequest")
	proto.RegisterType((*AssignLocToBlockRequest)(nil), "binkyrailways.v1.AssignLocToBlockRequest")
	proto.RegisterType((*PutLocOnTrackRequest)(nil), "binkyrailways.v1.PutLocOnTrackRequest")
	proto.RegisterType((*TakeLocOfTrackRequest)(nil), "binkyrailways.v1.TakeLocOfTrackRequest")
	proto.RegisterType((*SetBlockClosedRequest)(nil), "binkyrailways.v1.SetBlockClosedRequest")
	proto.RegisterType((*DiscoverHardwareRequest)(nil), "binkyrailways.v1.DiscoverHardwareRequest")
	proto.RegisterType((*DiscoverHardwareResponse)(nil), "binkyrailways.v1.DiscoverHardwareResponse")
}

func init() { proto.RegisterFile("br_state_service.proto", fileDescriptor_a476a990e66ccc93) }

var fileDescriptor_a476a990e66ccc93 = []byte{
	// 1224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xc6, 0xe9, 0x26, 0x4d, 0x4e, 0x20, 0x5b, 0x4d, 0xff, 0x5c, 0xb3, 0x0d, 0x8b, 0xc5, 0x4f,
	0xa1, 0x25, 0xdd, 0x16, 0x58, 0xed, 0x0f, 0xd2, 0xaa, 0x4d, 0xbb, 0x6d, 0x77, 0x5b, 0xb6, 0x72,
	0x2a, 0x56, 0x20, 0x50, 0xe5, 0xd8, 0xd3, 0x66, 0x88, 0xe3, 0x09, 0xf6, 0x38, 0x25, 0xf7, 0x48,
	0xbc, 0x02, 0xb7, 0x3c, 0x06, 0x6f, 0xc0, 0x25, 0x8f, 0x80, 0xca, 0x33, 0x70, 0x8f, 0x3c, 0x63,
	0xa7, 0x76, 0x3d, 0x4e, 0xa2, 0x15, 0x77, 0x3e, 0x33, 0xdf, 0xf7, 0x9d, 0x33, 0x93, 0x99, 0xf3,
	0x4d, 0x60, 0xa9, 0xed, 0x9d, 0xfb, 0xcc, 0x64, 0xf8, 0xdc, 0xc7, 0xde, 0x80, 0x58, 0xb8, 0xd1,
	0xf7, 0x28, 0xa3, 0x68, 0xae, 0x4d, 0xdc, 0xee, 0xd0, 0x33, 0x89, 0x73, 0x65, 0x0e, 0xfd, 0xc6,
	0x60, 0x4b, 0x5b, 0x18, 0x21, 0xd9, 0xb0, 0x8f, 0x7d, 0x81, 0xe3, 0xa3, 0x3d, 0x6a, 0x63, 0x27,
	0x35, 0xba, 0x34, 0x1a, 0x4d, 0xa9, 0xea, 0x2f, 0x61, 0x61, 0xdf, 0x35, 0xdb, 0x0e, 0x36, 0x02,
	0xf7, 0x84, 0xda, 0xd8, 0xc0, 0x3f, 0x05, 0xd8, 0x67, 0x48, 0x85, 0xd9, 0x01, 0xf1, 0x58, 0x60,
	0x3a, 0xaa, 0x72, 0x5f, 0x59, 0x2b, 0x1b, 0x71, 0x88, 0x56, 0xa0, 0x6c, 0x06, 0x8c, 0x9e, 0x7b,
	0x81, 0xab, 0x16, 0xc4, 0x54, 0x18, 0x1b, 0x81, 0xab, 0xff, 0xae, 0xc0, 0xd2, 0x01, 0x66, 0xad,
	0xb0, 0xa6, 0x66, 0xc7, 0x74, 0x2f, 0xb1, 0x1f, 0xeb, 0x1d, 0x43, 0xa9, 0x63, 0xfa, 0x1d, 0xec,
	0xab, 0xca, 0xfd, 0x99, 0xb5, 0xea, 0xf6, 0x17, 0x8d, 0xdb, 0xcb, 0x69, 0xc8, 0x99, 0x8d, 0x43,
	0x4e, 0xdb, 0x77, 0x99, 0x37, 0x34, 0x22, 0x0d, 0xed, 0x31, 0x54, 0x13, 0xc3, 0x68, 0x0e, 0x66,
	0xba, 0x78, 0xc8, 0x0b, 0xad, 0x18, 0xe1, 0x27, 0x5a, 0x80, 0xe2, 0xc0, 0x74, 0x02, 0xcc, 0x2b,
	0xac, 0x18, 0x22, 0x78, 0x52, 0x78, 0xa4, 0xe8, 0xff, 0xde, 0x81, 0x6a, 0x22, 0x0d, 0x7a, 0x04,
	0xb3, 0x51, 0x11, 0x9c, 0x5f, 0xdd, 0xae, 0x67, 0x2b, 0x33, 0xc4, 0x37, 0xa7, 0x19, 0x31, 0x1c,
	0x6d, 0xc0, 0x8c, 0x43, 0x2d, 0x9e, 0xa1, 0xba, 0xad, 0x65, 0x59, 0xc7, 0xd4, 0x12, 0x8c, 0x10,
	0x86, 0x4e, 0xa0, 0x66, 0xd1, 0x5e, 0xcf, 0x74, 0xed, 0x70, 0x90, 0x50, 0x57, 0x9d, 0xe1, 0xc4,
	0x0f, 0xb3, 0xc4, 0x66, 0x0a, 0x27, 0x34, 0x6e, 0x91, 0xd1, 0x36, 0x14, 0xdb, 0x0e, 0xb5, 0xba,
	0xea, 0x1d, 0xae, 0x72, 0x2f, 0xab, 0xb2, 0x1b, 0x4e, 0x0b, 0xb2, 0x80, 0xa2, 0x1d, 0x00, 0xfe,
	0x71, 0xe0, 0xd1, 0xa0, 0xaf, 0x16, 0x39, 0xf1, 0xfd, 0x1c, 0x22, 0xc7, 0x08, 0x76, 0x82, 0x84,
	0x9e, 0x42, 0xf9, 0xc7, 0xc0, 0xb5, 0x78, 0xfd, 0x25, 0x2e, 0xf0, 0x5e, 0x56, 0xe0, 0x45, 0x84,
	0x10, 0xf4, 0x11, 0x01, 0x7d, 0x09, 0x25, 0x1a, 0xb0, 0x7e, 0xc0, 0xd4, 0x59, 0x4e, 0x5d, 0xcd,
	0x52, 0x5f, 0xf1, 0x79, 0x41, 0x8c, 0xc0, 0xe1, 0x52, 0x3d, 0x1a, 0x30, 0xac, 0x96, 0xf3, 0x96,
	0x6a, 0x84, 0xd3, 0xd1, 0x52, 0x39, 0x34, 0x4c, 0xe5, 0x63, 0xd7, 0xa7, 0x9e, 0x5a, 0xc9, 0x4b,
	0xd5, 0xe2, 0xf3, 0x51, 0x2a, 0x01, 0xe6, 0x34, 0x72, 0xe9, 0x9a, 0x8e, 0x0a, 0xb9, 0x34, 0x3e,
	0x1f, 0xd3, 0x78, 0x80, 0x6a, 0x50, 0x20, 0xb6, 0x6a, 0xf3, 0xa3, 0x56, 0x20, 0x36, 0x42, 0x70,
	0x27, 0x3c, 0xa8, 0x2a, 0xe6, 0x23, 0xfc, 0x5b, 0x5f, 0x87, 0xbb, 0x2d, 0xcc, 0x4e, 0xe9, 0x15,
	0xf6, 0x12, 0x77, 0x0c, 0xf3, 0xbb, 0x67, 0xc7, 0x77, 0x2c, 0x0a, 0xf5, 0x87, 0xa0, 0xb5, 0x30,
	0xdb, 0x09, 0x18, 0xed, 0x99, 0x8c, 0x58, 0x4d, 0xea, 0x32, 0x8f, 0x3a, 0x93, 0x79, 0xbf, 0x28,
	0x50, 0x6f, 0x61, 0x16, 0x9e, 0xbc, 0x3e, 0xc6, 0xf6, 0x8e, 0x6b, 0xef, 0x11, 0x0f, 0xf3, 0xdd,
	0x8f, 0xc9, 0xa2, 0x56, 0x65, 0x54, 0xeb, 0x02, 0x14, 0xfd, 0x10, 0xcb, 0xcf, 0x71, 0xd1, 0x10,
	0x01, 0xfa, 0x0a, 0x2a, 0x76, 0xcc, 0xe4, 0x07, 0xb5, 0x26, 0xbb, 0x17, 0xc7, 0xd4, 0xba, 0xd1,
	0xbf, 0x21, 0xe8, 0xa7, 0xf0, 0x81, 0xa8, 0x22, 0x2a, 0xdc, 0xc1, 0xf6, 0x68, 0x2d, 0xa6, 0xe3,
	0x0c, 0xf3, 0x6a, 0x49, 0x2c, 0xac, 0x90, 0x5e, 0x18, 0x86, 0x25, 0xa1, 0xf8, 0x3c, 0x3a, 0x4c,
	0x7e, 0x9e, 0xc6, 0x53, 0xa8, 0x5c, 0xc4, 0x18, 0xb5, 0xc0, 0x7b, 0xcd, 0xaa, 0xb4, 0xf2, 0x58,
	0xc9, 0xb8, 0xc1, 0xeb, 0x8f, 0xa1, 0x9a, 0x98, 0x09, 0xf7, 0x86, 0xb8, 0x36, 0xfe, 0x99, 0xcb,
	0x17, 0x0d, 0x11, 0xa4, 0x7b, 0x4b, 0x39, 0xea, 0x2d, 0xba, 0x03, 0x2b, 0x2d, 0xcc, 0x5a, 0x57,
	0x84, 0x59, 0x9d, 0x89, 0x9b, 0xfe, 0x2c, 0xb9, 0xbd, 0x05, 0xbe, 0xbd, 0x92, 0x8b, 0x78, 0x5b,
	0x2c, 0xb1, 0xc3, 0xcf, 0xe1, 0x5e, 0x0b, 0xb3, 0x5d, 0xe2, 0x9a, 0xde, 0x50, 0xdc, 0x99, 0x1d,
	0x8b, 0x91, 0x01, 0xce, 0x4b, 0xb8, 0x04, 0x25, 0x93, 0x03, 0xa2, 0xa2, 0xa3, 0x48, 0x5f, 0x87,
	0x95, 0xa6, 0x43, 0xac, 0xee, 0x37, 0xa2, 0xb9, 0x8b, 0x3b, 0x91, 0x23, 0xa2, 0xff, 0xaa, 0xc0,
	0xf2, 0x8e, 0x1f, 0x9e, 0xf9, 0x63, 0x6a, 0x9d, 0x51, 0xde, 0x27, 0x62, 0xec, 0x22, 0x94, 0x1c,
	0x6a, 0x9d, 0x8f, 0xf0, 0x45, 0x87, 0x5a, 0x47, 0x76, 0x68, 0x16, 0xbc, 0x7b, 0x84, 0x13, 0xa2,
	0x15, 0xcf, 0xf2, 0xf8, 0xc8, 0x46, 0x4f, 0xa2, 0x6e, 0x74, 0xee, 0x13, 0x1b, 0x47, 0x67, 0xec,
	0xdd, 0xbc, 0x36, 0x46, 0x6c, 0x6c, 0x54, 0xda, 0xf1, 0xa7, 0xfe, 0x19, 0x2c, 0x9c, 0x06, 0xe1,
	0x71, 0x78, 0xe5, 0x9e, 0x79, 0xe6, 0xa4, 0x2a, 0xf4, 0x06, 0x2c, 0x9e, 0x99, 0x5d, 0x1c, 0xe2,
	0x2f, 0xa6, 0xc1, 0x3f, 0x83, 0xc5, 0x70, 0x77, 0xc3, 0x74, 0x4d, 0x87, 0xfa, 0xd8, 0x1e, 0xb3,
	0xad, 0x16, 0x07, 0xc4, 0xdb, 0x2a, 0x22, 0xfd, 0x00, 0x96, 0xf7, 0x88, 0x6f, 0xd1, 0x01, 0xf6,
	0x0e, 0x4d, 0xcf, 0xbe, 0x32, 0xbd, 0xd1, 0x2f, 0xb3, 0x01, 0xa8, 0x13, 0x0d, 0x85, 0x86, 0x1c,
	0x38, 0xf8, 0x26, 0xfd, 0x5c, 0x3c, 0x73, 0xc2, 0x27, 0x8e, 0x6c, 0x5d, 0x03, 0x35, 0x2b, 0xe4,
	0xf7, 0xa9, 0xeb, 0xe3, 0xed, 0x3f, 0x6a, 0xf0, 0x36, 0xef, 0x43, 0x2d, 0xe1, 0xe8, 0xe8, 0x05,
	0xdc, 0x3d, 0xc0, 0x2c, 0x69, 0x56, 0x68, 0x39, 0xbb, 0xa1, 0xfb, 0xbd, 0x3e, 0x1b, 0x6a, 0x13,
	0x5c, 0x0e, 0xbd, 0x86, 0x77, 0x52, 0xef, 0x02, 0xf4, 0x91, 0x44, 0x49, 0xf2, 0x70, 0x98, 0x28,
	0x7c, 0x04, 0xb5, 0x3d, 0xe2, 0x27, 0x95, 0xdf, 0xb8, 0xc6, 0x13, 0x40, 0xa2, 0x84, 0x7d, 0x97,
	0x11, 0x36, 0x3c, 0xc3, 0x3e, 0xc3, 0xde, 0x9b, 0xcb, 0x7d, 0x0d, 0xf3, 0x51, 0x65, 0xff, 0x8f,
	0xde, 0xf7, 0xfc, 0xe7, 0x48, 0x3e, 0x69, 0xd0, 0xda, 0xb4, 0xaf, 0x1e, 0x4d, 0xe6, 0x3c, 0x37,
	0xb0, 0x07, 0x0a, 0x3a, 0x81, 0x72, 0xec, 0x27, 0x48, 0xd6, 0x3b, 0xd2, 0x5e, 0x33, 0xb1, 0x58,
	0x0b, 0xe6, 0x25, 0x8e, 0x83, 0x36, 0xa4, 0xca, 0x39, 0xc6, 0x34, 0x31, 0xc9, 0x25, 0x2c, 0xe7,
	0xb8, 0x13, 0x7a, 0x20, 0x4d, 0x34, 0xc6, 0xc8, 0xb4, 0x31, 0x2f, 0x2e, 0xe4, 0xc3, 0xea, 0x58,
	0x03, 0x42, 0x0f, 0xf3, 0xd2, 0x8d, 0x77, 0xac, 0xb1, 0x49, 0x5f, 0x73, 0x87, 0x4f, 0x7a, 0x94,
	0xec, 0xf7, 0x96, 0xdb, 0xd8, 0x58, 0xe1, 0x36, 0xa0, 0xac, 0xb5, 0xa0, 0x75, 0xa9, 0xb6, 0xdc,
	0x80, 0xb4, 0x49, 0xaf, 0x34, 0x74, 0x21, 0x5a, 0x5e, 0xc6, 0x50, 0x50, 0x43, 0x9a, 0x26, 0xd7,
	0x79, 0xb4, 0xf1, 0x8f, 0x3a, 0x64, 0x02, 0xca, 0x1a, 0x8e, 0x6c, 0x2d, 0xb9, 0xb6, 0x34, 0xf1,
	0x94, 0xfd, 0x00, 0x73, 0xb7, 0x5d, 0x0a, 0x7d, 0x92, 0xe5, 0xe4, 0x38, 0xd9, 0x34, 0x9d, 0x31,
	0xe5, 0x3d, 0xb2, 0xce, 0x28, 0x33, 0xa7, 0x89, 0xc2, 0xdf, 0x42, 0x2d, 0xed, 0x52, 0xe8, 0xe3,
	0x2c, 0x43, 0xea, 0x63, 0x53, 0xd4, 0x5c, 0x4b, 0x1b, 0x9a, 0x4c, 0x5a, 0x6a, 0x79, 0xda, 0xd8,
	0x7f, 0x16, 0x88, 0xc0, 0xdc, 0x6d, 0x7f, 0x92, 0xed, 0x75, 0x8e, 0x19, 0x6a, 0x9f, 0x4e, 0x03,
	0x15, 0x76, 0x87, 0x5e, 0xc2, 0xbc, 0x81, 0x7d, 0xcc, 0x0e, 0x53, 0x1e, 0x89, 0x24, 0x4f, 0x86,
	0xa3, 0xbd, 0x58, 0x3f, 0xaf, 0x77, 0xef, 0x36, 0xff, 0xbc, 0xae, 0x2b, 0x7f, 0x5d, 0xd7, 0x95,
	0xbf, 0xaf, 0xeb, 0xca, 0x6f, 0xff, 0xd4, 0xdf, 0xfa, 0x6e, 0xeb, 0x92, 0xb0, 0x4e, 0xd0, 0x6e,
	0x58, 0xb4, 0xb7, 0x99, 0x22, 0x6d, 0xee, 0x86, 0x91, 0x11, 0x47, 0xfd, 0xee, 0xe5, 0xa6, 0xd9,
	0x27, 0x9b, 0x83, 0xad, 0x76, 0x89, 0xff, 0x85, 0xfe, 0xfc, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x9e, 0x2c, 0xaa, 0x7d, 0xb2, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StateServiceClient is the client API for StateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateServiceClient interface {
	// Gets the current railway state
	GetRailwayState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RailwayState, error)
	// Enable the run mode of the process.
	EnableRunMode(ctx context.Context, in *EnableRunModeRequest, opts ...grpc.CallOption) (*RailwayState, error)
	// Disable the run mode of the process, switching back to edit mode.
	DisableRunMode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RailwayState, error)
	// Enable the entity tester.
	EnableEntityTester(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RailwayState, error)
	// Disable the entity tester.
	DisableEntityTester(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RailwayState, error)
	// Fetch state changes when they happen
	GetStateChanges(ctx context.Context, in *GetStateChangesRequest, opts ...grpc.CallOption) (StateService_GetStateChangesClient, error)
	// Change the requested power state
	SetPower(ctx context.Context, in *SetPowerRequest, opts ...grpc.CallOption) (*RailwayState, error)
	// Change the requested automatic controller state
	SetAutomaticControl(ctx context.Context, in *SetAutomaticControlRequest, opts ...grpc.CallOption) (*RailwayState, error)
	// Change the speed and direction of a loc
	SetLocSpeedAndDirection(ctx context.Context, in *SetLocSpeedAndDirectionRequest, opts ...grpc.CallOption) (*LocState, error)
	// Change the automatic controlled state of a loc
	SetLocControlledAutomatically(ctx context.Context, in *SetLocControlledAutomaticallyRequest, opts ...grpc.CallOption) (*LocState, error)
	// Change functions of a loc
	SetLocFunctions(ctx context.Context, in *SetLocFunctionsRequest, opts ...grpc.CallOption) (*LocState, error)
	// Change the direction of a junction of type switch
	SetSwitchDirection(ctx context.Context, in *SetSwitchDirectionRequest, opts ...grpc.CallOption) (*JunctionState, error)
	// Change the active state of an output of type binary output
	SetBinaryOutputActive(ctx context.Context, in *SetBinaryOutputActiveRequest, opts ...grpc.CallOption) (*OutputState, error)
	// Click on an entity in virtual mode
	ClickVirtualSensor(ctx context.Context, in *ClickVirtualSensorRequest, opts ...grpc.CallOption) (*RailwayState, error)
	// Assign a loc to a block
	AssignLocToBlock(ctx context.Context, in *AssignLocToBlockRequest, opts ...grpc.CallOption) (*RailwayState, error)
	// Put a loc onto the track
	PutLocOnTrack(ctx context.Context, in *PutLocOnTrackRequest, opts ...grpc.CallOption) (*RailwayState, error)
	// Remove a loc from the track
	TakeLocOfTrack(ctx context.Context, in *TakeLocOfTrackRequest, opts ...grpc.CallOption) (*RailwayState, error)
	// Set the closed status of a block
	SetBlockClosed(ctx context.Context, in *SetBlockClosedRequest, opts ...grpc.CallOption) (*BlockState, error)
	// Trigger a hardware discovery request
	DiscoverHardware(ctx context.Context, in *DiscoverHardwareRequest, opts ...grpc.CallOption) (*DiscoverHardwareResponse, error)
	// Request a reset of hardware module with given ID
	ResetHardwareModule(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Empty, error)
}

type stateServiceClient struct {
	cc *grpc.ClientConn
}

func NewStateServiceClient(cc *grpc.ClientConn) StateServiceClient {
	return &stateServiceClient{cc}
}

func (c *stateServiceClient) GetRailwayState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RailwayState, error) {
	out := new(RailwayState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/GetRailwayState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) EnableRunMode(ctx context.Context, in *EnableRunModeRequest, opts ...grpc.CallOption) (*RailwayState, error) {
	out := new(RailwayState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/EnableRunMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) DisableRunMode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RailwayState, error) {
	out := new(RailwayState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/DisableRunMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) EnableEntityTester(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RailwayState, error) {
	out := new(RailwayState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/EnableEntityTester", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) DisableEntityTester(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RailwayState, error) {
	out := new(RailwayState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/DisableEntityTester", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) GetStateChanges(ctx context.Context, in *GetStateChangesRequest, opts ...grpc.CallOption) (StateService_GetStateChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StateService_serviceDesc.Streams[0], "/binkyrailways.v1.StateService/GetStateChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateServiceGetStateChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StateService_GetStateChangesClient interface {
	Recv() (*StateChange, error)
	grpc.ClientStream
}

type stateServiceGetStateChangesClient struct {
	grpc.ClientStream
}

func (x *stateServiceGetStateChangesClient) Recv() (*StateChange, error) {
	m := new(StateChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stateServiceClient) SetPower(ctx context.Context, in *SetPowerRequest, opts ...grpc.CallOption) (*RailwayState, error) {
	out := new(RailwayState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/SetPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) SetAutomaticControl(ctx context.Context, in *SetAutomaticControlRequest, opts ...grpc.CallOption) (*RailwayState, error) {
	out := new(RailwayState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/SetAutomaticControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) SetLocSpeedAndDirection(ctx context.Context, in *SetLocSpeedAndDirectionRequest, opts ...grpc.CallOption) (*LocState, error) {
	out := new(LocState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/SetLocSpeedAndDirection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) SetLocControlledAutomatically(ctx context.Context, in *SetLocControlledAutomaticallyRequest, opts ...grpc.CallOption) (*LocState, error) {
	out := new(LocState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/SetLocControlledAutomatically", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) SetLocFunctions(ctx context.Context, in *SetLocFunctionsRequest, opts ...grpc.CallOption) (*LocState, error) {
	out := new(LocState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/SetLocFunctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) SetSwitchDirection(ctx context.Context, in *SetSwitchDirectionRequest, opts ...grpc.CallOption) (*JunctionState, error) {
	out := new(JunctionState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/SetSwitchDirection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) SetBinaryOutputActive(ctx context.Context, in *SetBinaryOutputActiveRequest, opts ...grpc.CallOption) (*OutputState, error) {
	out := new(OutputState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/SetBinaryOutputActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) ClickVirtualSensor(ctx context.Context, in *ClickVirtualSensorRequest, opts ...grpc.CallOption) (*RailwayState, error) {
	out := new(RailwayState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/ClickVirtualSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) AssignLocToBlock(ctx context.Context, in *AssignLocToBlockRequest, opts ...grpc.CallOption) (*RailwayState, error) {
	out := new(RailwayState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/AssignLocToBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) PutLocOnTrack(ctx context.Context, in *PutLocOnTrackRequest, opts ...grpc.CallOption) (*RailwayState, error) {
	out := new(RailwayState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/PutLocOnTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) TakeLocOfTrack(ctx context.Context, in *TakeLocOfTrackRequest, opts ...grpc.CallOption) (*RailwayState, error) {
	out := new(RailwayState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/TakeLocOfTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) SetBlockClosed(ctx context.Context, in *SetBlockClosedRequest, opts ...grpc.CallOption) (*BlockState, error) {
	out := new(BlockState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/SetBlockClosed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) DiscoverHardware(ctx context.Context, in *DiscoverHardwareRequest, opts ...grpc.CallOption) (*DiscoverHardwareResponse, error) {
	out := new(DiscoverHardwareResponse)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/DiscoverHardware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) ResetHardwareModule(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/ResetHardwareModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateServiceServer is the server API for StateService service.
type StateServiceServer interface {
	// Gets the current railway state
	GetRailwayState(context.Context, *Empty) (*RailwayState, error)
	// Enable the run mode of the process.
	EnableRunMode(context.Context, *EnableRunModeRequest) (*RailwayState, error)
	// Disable the run mode of the process, switching back to edit mode.
	DisableRunMode(context.Context, *Empty) (*RailwayState, error)
	// Enable the entity tester.
	EnableEntityTester(context.Context, *Empty) (*RailwayState, error)
	// Disable the entity tester.
	DisableEntityTester(context.Context, *Empty) (*RailwayState, error)
	// Fetch state changes when they happen
	GetStateChanges(*GetStateChangesRequest, StateService_GetStateChangesServer) error
	// Change the requested power state
	SetPower(context.Context, *SetPowerRequest) (*RailwayState, error)
	// Change the requested automatic controller state
	SetAutomaticControl(context.Context, *SetAutomaticControlRequest) (*RailwayState, error)
	// Change the speed and direction of a loc
	SetLocSpeedAndDirection(context.Context, *SetLocSpeedAndDirectionRequest) (*LocState, error)
	// Change the automatic controlled state of a loc
	SetLocControlledAutomatically(context.Context, *SetLocControlledAutomaticallyRequest) (*LocState, error)
	// Change functions of a loc
	SetLocFunctions(context.Context, *SetLocFunctionsRequest) (*LocState, error)
	// Change the direction of a junction of type switch
	SetSwitchDirection(context.Context, *SetSwitchDirectionRequest) (*JunctionState, error)
	// Change the active state of an output of type binary output
	SetBinaryOutputActive(context.Context, *SetBinaryOutputActiveRequest) (*OutputState, error)
	// Click on an entity in virtual mode
	ClickVirtualSensor(context.Context, *ClickVirtualSensorRequest) (*RailwayState, error)
	// Assign a loc to a block
	AssignLocToBlock(context.Context, *AssignLocToBlockRequest) (*RailwayState, error)
	// Put a loc onto the track
	PutLocOnTrack(context.Context, *PutLocOnTrackRequest) (*RailwayState, error)
	// Remove a loc from the track
	TakeLocOfTrack(context.Context, *TakeLocOfTrackRequest) (*RailwayState, error)
	// Set the closed status of a block
	SetBlockClosed(context.Context, *SetBlockClosedRequest) (*BlockState, error)
	// Trigger a hardware discovery request
	DiscoverHardware(context.Context, *DiscoverHardwareRequest) (*DiscoverHardwareResponse, error)
	// Request a reset of hardware module with given ID
	ResetHardwareModule(context.Context, *IDRequest) (*Empty, error)
}

// UnimplementedStateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStateServiceServer struct {
}

func (*UnimplementedStateServiceServer) GetRailwayState(ctx context.Context, req *Empty) (*RailwayState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRailwayState not implemented")
}
func (*UnimplementedStateServiceServer) EnableRunMode(ctx context.Context, req *EnableRunModeRequest) (*RailwayState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableRunMode not implemented")
}
func (*UnimplementedStateServiceServer) DisableRunMode(ctx context.Context, req *Empty) (*RailwayState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableRunMode not implemented")
}
func (*UnimplementedStateServiceServer) EnableEntityTester(ctx context.Context, req *Empty) (*RailwayState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableEntityTester not implemented")
}
func (*UnimplementedStateServiceServer) DisableEntityTester(ctx context.Context, req *Empty) (*RailwayState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableEntityTester not implemented")
}
func (*UnimplementedStateServiceServer) GetStateChanges(req *GetStateChangesRequest, srv StateService_GetStateChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStateChanges not implemented")
}
func (*UnimplementedStateServiceServer) SetPower(ctx context.Context, req *SetPowerRequest) (*RailwayState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPower not implemented")
}
func (*UnimplementedStateServiceServer) SetAutomaticControl(ctx context.Context, req *SetAutomaticControlRequest) (*RailwayState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAutomaticControl not implemented")
}
func (*UnimplementedStateServiceServer) SetLocSpeedAndDirection(ctx context.Context, req *SetLocSpeedAndDirectionRequest) (*LocState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocSpeedAndDirection not implemented")
}
func (*UnimplementedStateServiceServer) SetLocControlledAutomatically(ctx context.Context, req *SetLocControlledAutomaticallyRequest) (*LocState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocControlledAutomatically not implemented")
}
func (*UnimplementedStateServiceServer) SetLocFunctions(ctx context.Context, req *SetLocFunctionsRequest) (*LocState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocFunctions not implemented")
}
func (*UnimplementedStateServiceServer) SetSwitchDirection(ctx context.Context, req *SetSwitchDirectionRequest) (*JunctionState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSwitchDirection not implemented")
}
func (*UnimplementedStateServiceServer) SetBinaryOutputActive(ctx context.Context, req *SetBinaryOutputActiveRequest) (*OutputState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBinaryOutputActive not implemented")
}
func (*UnimplementedStateServiceServer) ClickVirtualSensor(ctx context.Context, req *ClickVirtualSensorRequest) (*RailwayState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickVirtualSensor not implemented")
}
func (*UnimplementedStateServiceServer) AssignLocToBlock(ctx context.Context, req *AssignLocToBlockRequest) (*RailwayState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignLocToBlock not implemented")
}
func (*UnimplementedStateServiceServer) PutLocOnTrack(ctx context.Context, req *PutLocOnTrackRequest) (*RailwayState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutLocOnTrack not implemented")
}
func (*UnimplementedStateServiceServer) TakeLocOfTrack(ctx context.Context, req *TakeLocOfTrackRequest) (*RailwayState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeLocOfTrack not implemented")
}
func (*UnimplementedStateServiceServer) SetBlockClosed(ctx context.Context, req *SetBlockClosedRequest) (*BlockState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBlockClosed not implemented")
}
func (*UnimplementedStateServiceServer) DiscoverHardware(ctx context.Context, req *DiscoverHardwareRequest) (*DiscoverHardwareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverHardware not implemented")
}
func (*UnimplementedStateServiceServer) ResetHardwareModule(ctx context.Context, req *IDRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetHardwareModule not implemented")
}

func RegisterStateServiceServer(s *grpc.Server, srv StateServiceServer) {
	s.RegisterService(&_StateService_serviceDesc, srv)
}

func _StateService_GetRailwayState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).GetRailwayState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/GetRailwayState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).GetRailwayState(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_EnableRunMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableRunModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).EnableRunMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/EnableRunMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).EnableRunMode(ctx, req.(*EnableRunModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_DisableRunMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).DisableRunMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/DisableRunMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).DisableRunMode(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_EnableEntityTester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).EnableEntityTester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/EnableEntityTester",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).EnableEntityTester(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_DisableEntityTester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).DisableEntityTester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/DisableEntityTester",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).DisableEntityTester(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_GetStateChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetStateChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateServiceServer).GetStateChanges(m, &stateServiceGetStateChangesServer{stream})
}

type StateService_GetStateChangesServer interface {
	Send(*StateChange) error
	grpc.ServerStream
}

type stateServiceGetStateChangesServer struct {
	grpc.ServerStream
}

func (x *stateServiceGetStateChangesServer) Send(m *StateChange) error {
	return x.ServerStream.SendMsg(m)
}

func _StateService_SetPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).SetPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/SetPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).SetPower(ctx, req.(*SetPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_SetAutomaticControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAutomaticControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).SetAutomaticControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/SetAutomaticControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).SetAutomaticControl(ctx, req.(*SetAutomaticControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_SetLocSpeedAndDirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLocSpeedAndDirectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).SetLocSpeedAndDirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/SetLocSpeedAndDirection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).SetLocSpeedAndDirection(ctx, req.(*SetLocSpeedAndDirectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_SetLocControlledAutomatically_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLocControlledAutomaticallyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).SetLocControlledAutomatically(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/SetLocControlledAutomatically",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).SetLocControlledAutomatically(ctx, req.(*SetLocControlledAutomaticallyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_SetLocFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLocFunctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).SetLocFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/SetLocFunctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).SetLocFunctions(ctx, req.(*SetLocFunctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_SetSwitchDirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSwitchDirectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).SetSwitchDirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/SetSwitchDirection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).SetSwitchDirection(ctx, req.(*SetSwitchDirectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_SetBinaryOutputActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBinaryOutputActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).SetBinaryOutputActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/SetBinaryOutputActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).SetBinaryOutputActive(ctx, req.(*SetBinaryOutputActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_ClickVirtualSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickVirtualSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).ClickVirtualSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/ClickVirtualSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).ClickVirtualSensor(ctx, req.(*ClickVirtualSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_AssignLocToBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignLocToBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).AssignLocToBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/AssignLocToBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).AssignLocToBlock(ctx, req.(*AssignLocToBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_PutLocOnTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutLocOnTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).PutLocOnTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/PutLocOnTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).PutLocOnTrack(ctx, req.(*PutLocOnTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_TakeLocOfTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeLocOfTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).TakeLocOfTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/TakeLocOfTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).TakeLocOfTrack(ctx, req.(*TakeLocOfTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_SetBlockClosed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBlockClosedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).SetBlockClosed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/SetBlockClosed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).SetBlockClosed(ctx, req.(*SetBlockClosedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_DiscoverHardware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverHardwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).DiscoverHardware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/DiscoverHardware",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).DiscoverHardware(ctx, req.(*DiscoverHardwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_ResetHardwareModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).ResetHardwareModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/ResetHardwareModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).ResetHardwareModule(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "binkyrailways.v1.StateService",
	HandlerType: (*StateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRailwayState",
			Handler:    _StateService_GetRailwayState_Handler,
		},
		{
			MethodName: "EnableRunMode",
			Handler:    _StateService_EnableRunMode_Handler,
		},
		{
			MethodName: "DisableRunMode",
			Handler:    _StateService_DisableRunMode_Handler,
		},
		{
			MethodName: "EnableEntityTester",
			Handler:    _StateService_EnableEntityTester_Handler,
		},
		{
			MethodName: "DisableEntityTester",
			Handler:    _StateService_DisableEntityTester_Handler,
		},
		{
			MethodName: "SetPower",
			Handler:    _StateService_SetPower_Handler,
		},
		{
			MethodName: "SetAutomaticControl",
			Handler:    _StateService_SetAutomaticControl_Handler,
		},
		{
			MethodName: "SetLocSpeedAndDirection",
			Handler:    _StateService_SetLocSpeedAndDirection_Handler,
		},
		{
			MethodName: "SetLocControlledAutomatically",
			Handler:    _StateService_SetLocControlledAutomatically_Handler,
		},
		{
			MethodName: "SetLocFunctions",
			Handler:    _StateService_SetLocFunctions_Handler,
		},
		{
			MethodName: "SetSwitchDirection",
			Handler:    _StateService_SetSwitchDirection_Handler,
		},
		{
			MethodName: "SetBinaryOutputActive",
			Handler:    _StateService_SetBinaryOutputActive_Handler,
		},
		{
			MethodName: "ClickVirtualSensor",
			Handler:    _StateService_ClickVirtualSensor_Handler,
		},
		{
			MethodName: "AssignLocToBlock",
			Handler:    _StateService_AssignLocToBlock_Handler,
		},
		{
			MethodName: "PutLocOnTrack",
			Handler:    _StateService_PutLocOnTrack_Handler,
		},
		{
			MethodName: "TakeLocOfTrack",
			Handler:    _StateService_TakeLocOfTrack_Handler,
		},
		{
			MethodName: "SetBlockClosed",
			Handler:    _StateService_SetBlockClosed_Handler,
		},
		{
			MethodName: "DiscoverHardware",
			Handler:    _StateService_DiscoverHardware_Handler,
		},
		{
			MethodName: "ResetHardwareModule",
			Handler:    _StateService_ResetHardwareModule_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStateChanges",
			Handler:       _StateService_GetStateChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "br_state_service.proto",
}

func (m *EnableRunModeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableRunModeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableRunModeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AutoRun {
		i--
		if m.AutoRun {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Virtual {
		i--
		if m.Virtual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStateChangesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStateChangesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStateChangesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hashes) > 0 {
		for k := range m.Hashes {
			v := m.Hashes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBrStateService(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBrStateService(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBrStateService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StateChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintBrStateService(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBrStateService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.Signal != nil {
		{
			size, err := m.Signal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Sensor != nil {
		{
			size, err := m.Sensor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Route != nil {
		{
			size, err := m.Route.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Junction != nil {
		{
			size, err := m.Junction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.BlockGroup != nil {
		{
			size, err := m.BlockGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CommandStation != nil {
		{
			size, err := m.CommandStation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Loc != nil {
		{
			size, err := m.Loc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Railway != nil {
		{
			size, err := m.Railway.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetPowerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPowerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetPowerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetAutomaticControlRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAutomaticControlRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetAutomaticControlRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetLocSpeedAndDirectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetLocSpeedAndDirectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetLocSpeedAndDirectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Direction != 0 {
		i = encodeVarintBrStateService(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x18
	}
	if m.Speed != 0 {
		i = encodeVarintBrStateService(dAtA, i, uint64(m.Speed))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBrStateService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetLocControlledAutomaticallyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetLocControlledAutomaticallyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetLocControlledAutomaticallyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBrStateService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetLocFunctionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetLocFunctionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetLocFunctionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Functions) > 0 {
		for iNdEx := len(m.Functions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Functions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBrStateService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBrStateService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LocFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocFunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocFunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintBrStateService(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetSwitchDirectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetSwitchDirectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetSwitchDirectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Direction != 0 {
		i = encodeVarintBrStateService(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBrStateService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetBinaryOutputActiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBinaryOutputActiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetBinaryOutputActiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBrStateService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClickVirtualSensorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClickVirtualSensorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClickVirtualSensorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBrStateService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssignLocToBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignLocToBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignLocToBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BlockSide != 0 {
		i = encodeVarintBrStateService(dAtA, i, uint64(m.BlockSide))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BlockId) > 0 {
		i -= len(m.BlockId)
		copy(dAtA[i:], m.BlockId)
		i = encodeVarintBrStateService(dAtA, i, uint64(len(m.BlockId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LocId) > 0 {
		i -= len(m.LocId)
		copy(dAtA[i:], m.LocId)
		i = encodeVarintBrStateService(dAtA, i, uint64(len(m.LocId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PutLocOnTrackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutLocOnTrackRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutLocOnTrackRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LocId) > 0 {
		i -= len(m.LocId)
		copy(dAtA[i:], m.LocId)
		i = encodeVarintBrStateService(dAtA, i, uint64(len(m.LocId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TakeLocOfTrackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TakeLocOfTrackRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TakeLocOfTrackRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LocId) > 0 {
		i -= len(m.LocId)
		copy(dAtA[i:], m.LocId)
		i = encodeVarintBrStateService(dAtA, i, uint64(len(m.LocId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetBlockClosedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBlockClosedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetBlockClosedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Closed {
		i--
		if m.Closed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBrStateService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DiscoverHardwareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoverHardwareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoverHardwareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HardwareModuleId) > 0 {
		i -= len(m.HardwareModuleId)
		copy(dAtA[i:], m.HardwareModuleId)
		i = encodeVarintBrStateService(dAtA, i, uint64(len(m.HardwareModuleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DiscoverHardwareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoverHardwareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoverHardwareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintBrStateService(dAtA []byte, offset int, v uint64) int {
	offset -= sovBrStateService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EnableRunModeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Virtual {
		n += 2
	}
	if m.AutoRun {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStateChangesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for k, v := range m.Hashes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBrStateService(uint64(len(k))) + 1 + len(v) + sovBrStateService(uint64(len(v)))
			n += mapEntrySize + 1 + sovBrStateService(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Railway != nil {
		l = m.Railway.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Loc != nil {
		l = m.Loc.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.CommandStation != nil {
		l = m.CommandStation.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.BlockGroup != nil {
		l = m.BlockGroup.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Junction != nil {
		l = m.Junction.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Route != nil {
		l = m.Route.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Sensor != nil {
		l = m.Sensor.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Signal != nil {
		l = m.Signal.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 2 + l + sovBrStateService(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 2 + l + sovBrStateService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetPowerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetAutomaticControlRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetLocSpeedAndDirectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Speed != 0 {
		n += 1 + sovBrStateService(uint64(m.Speed))
	}
	if m.Direction != 0 {
		n += 1 + sovBrStateService(uint64(m.Direction))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetLocControlledAutomaticallyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetLocFunctionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if len(m.Functions) > 0 {
		for _, e := range m.Functions {
			l = e.Size()
			n += 1 + l + sovBrStateService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocFunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovBrStateService(uint64(m.Index))
	}
	if m.Value {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetSwitchDirectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Direction != 0 {
		n += 1 + sovBrStateService(uint64(m.Direction))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetBinaryOutputActiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Active {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClickVirtualSensorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AssignLocToBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocId)
	if l > 0 {
		n += 1 + l + sovBrStateService(uint64(l))
	}
	l = len(m.BlockId)
	if l > 0 {
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.BlockSide != 0 {
		n += 1 + sovBrStateService(uint64(m.BlockSide))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutLocOnTrackRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocId)
	if l > 0 {
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TakeLocOfTrackRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocId)
	if l > 0 {
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetBlockClosedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Closed {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiscoverHardwareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HardwareModuleId)
	if l > 0 {
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiscoverHardwareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBrStateService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBrStateService(x uint64) (n int) {
	return sovBrStateService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EnableRunModeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableRunModeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableRunModeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Virtual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Virtual = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoRun", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoRun = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStateChangesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStateChangesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStateChangesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hashes == nil {
				m.Hashes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBrStateService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrStateService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBrStateService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBrStateService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBrStateService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBrStateService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBrStateService
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBrStateService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBrStateService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Hashes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Railway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Railway == nil {
				m.Railway = &RailwayState{}
			}
			if err := m.Railway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Loc == nil {
				m.Loc = &LocState{}
			}
			if err := m.Loc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandStation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommandStation == nil {
				m.CommandStation = &CommandStationState{}
			}
			if err := m.CommandStation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &BlockState{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockGroup == nil {
				m.BlockGroup = &BlockGroupState{}
			}
			if err := m.BlockGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Junction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Junction == nil {
				m.Junction = &JunctionState{}
			}
			if err := m.Junction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &OutputState{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Route == nil {
				m.Route = &RouteState{}
			}
			if err := m.Route.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sensor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sensor == nil {
				m.Sensor = &SensorState{}
			}
			if err := m.Sensor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signal == nil {
				m.Signal = &SignalState{}
			}
			if err := m.Signal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPowerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPowerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPowerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAutomaticControlRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAutomaticControlRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAutomaticControlRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetLocSpeedAndDirectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetLocSpeedAndDirectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetLocSpeedAndDirectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			m.Speed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Speed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= LocDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetLocControlledAutomaticallyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetLocControlledAutomaticallyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetLocControlledAutomaticallyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetLocFunctionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetLocFunctionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetLocFunctionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Functions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Functions = append(m.Functions, &LocFunction{})
			if err := m.Functions[len(m.Functions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocFunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocFunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocFunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetSwitchDirectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetSwitchDirectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetSwitchDirectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= SwitchDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetBinaryOutputActiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetBinaryOutputActiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetBinaryOutputActiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClickVirtualSensorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClickVirtualSensorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClickVirtualSensorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignLocToBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignLocToBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignLocToBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSide", wireType)
			}
			m.BlockSide = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSide |= BlockSide(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutLocOnTrackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutLocOnTrackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutLocOnTrackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TakeLocOfTrackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TakeLocOfTrackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TakeLocOfTrackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetBlockClosedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetBlockClosedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetBlockClosedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Closed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Closed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoverHardwareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoverHardwareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoverHardwareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareModuleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareModuleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoverHardwareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoverHardwareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoverHardwareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBrStateService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBrStateService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBrStateService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBrStateService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBrStateService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBrStateService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBrStateService = fmt.Errorf("proto: unexpected end of group")
)
