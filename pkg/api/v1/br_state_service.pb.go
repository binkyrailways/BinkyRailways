// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: br_state_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request arguments for EnableRunMode.
type EnableRunModeRequest struct {
	// If set, run in virtual mode, otherwise live mode.
	Virtual              bool     `protobuf:"varint,1,opt,name=virtual,proto3" json:"virtual,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableRunModeRequest) Reset()         { *m = EnableRunModeRequest{} }
func (m *EnableRunModeRequest) String() string { return proto.CompactTextString(m) }
func (*EnableRunModeRequest) ProtoMessage()    {}
func (*EnableRunModeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{0}
}
func (m *EnableRunModeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableRunModeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnableRunModeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnableRunModeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableRunModeRequest.Merge(m, src)
}
func (m *EnableRunModeRequest) XXX_Size() int {
	return m.Size()
}
func (m *EnableRunModeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableRunModeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnableRunModeRequest proto.InternalMessageInfo

func (m *EnableRunModeRequest) GetVirtual() bool {
	if m != nil {
		return m.Virtual
	}
	return false
}

// Request arguments for GetStateChanges.
type GetStateChangesRequest struct {
	// If set, all state objects will be send to the stream before state changes
	// are passed.
	Bootstrap            bool     `protobuf:"varint,1,opt,name=bootstrap,proto3" json:"bootstrap,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStateChangesRequest) Reset()         { *m = GetStateChangesRequest{} }
func (m *GetStateChangesRequest) String() string { return proto.CompactTextString(m) }
func (*GetStateChangesRequest) ProtoMessage()    {}
func (*GetStateChangesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{1}
}
func (m *GetStateChangesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStateChangesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStateChangesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStateChangesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStateChangesRequest.Merge(m, src)
}
func (m *GetStateChangesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStateChangesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStateChangesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStateChangesRequest proto.InternalMessageInfo

func (m *GetStateChangesRequest) GetBootstrap() bool {
	if m != nil {
		return m.Bootstrap
	}
	return false
}

// State change of a single object.
// Only one of the fields is set;
type StateChange struct {
	Railway              *RailwayState        `protobuf:"bytes,1,opt,name=railway,proto3" json:"railway,omitempty"`
	Loc                  *LocState            `protobuf:"bytes,2,opt,name=loc,proto3" json:"loc,omitempty"`
	CommandStation       *CommandStationState `protobuf:"bytes,3,opt,name=commandStation,proto3" json:"commandStation,omitempty"`
	Block                *BlockState          `protobuf:"bytes,4,opt,name=block,proto3" json:"block,omitempty"`
	BlockGroup           *BlockGroupState     `protobuf:"bytes,5,opt,name=blockGroup,proto3" json:"blockGroup,omitempty"`
	Junction             *JunctionState       `protobuf:"bytes,6,opt,name=junction,proto3" json:"junction,omitempty"`
	Output               *OutputState         `protobuf:"bytes,7,opt,name=output,proto3" json:"output,omitempty"`
	Route                *RouteState          `protobuf:"bytes,8,opt,name=route,proto3" json:"route,omitempty"`
	Sensor               *SensorState         `protobuf:"bytes,9,opt,name=sensor,proto3" json:"sensor,omitempty"`
	Signal               *SignalState         `protobuf:"bytes,10,opt,name=signal,proto3" json:"signal,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *StateChange) Reset()         { *m = StateChange{} }
func (m *StateChange) String() string { return proto.CompactTextString(m) }
func (*StateChange) ProtoMessage()    {}
func (*StateChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{2}
}
func (m *StateChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateChange.Merge(m, src)
}
func (m *StateChange) XXX_Size() int {
	return m.Size()
}
func (m *StateChange) XXX_DiscardUnknown() {
	xxx_messageInfo_StateChange.DiscardUnknown(m)
}

var xxx_messageInfo_StateChange proto.InternalMessageInfo

func (m *StateChange) GetRailway() *RailwayState {
	if m != nil {
		return m.Railway
	}
	return nil
}

func (m *StateChange) GetLoc() *LocState {
	if m != nil {
		return m.Loc
	}
	return nil
}

func (m *StateChange) GetCommandStation() *CommandStationState {
	if m != nil {
		return m.CommandStation
	}
	return nil
}

func (m *StateChange) GetBlock() *BlockState {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *StateChange) GetBlockGroup() *BlockGroupState {
	if m != nil {
		return m.BlockGroup
	}
	return nil
}

func (m *StateChange) GetJunction() *JunctionState {
	if m != nil {
		return m.Junction
	}
	return nil
}

func (m *StateChange) GetOutput() *OutputState {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *StateChange) GetRoute() *RouteState {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *StateChange) GetSensor() *SensorState {
	if m != nil {
		return m.Sensor
	}
	return nil
}

func (m *StateChange) GetSignal() *SignalState {
	if m != nil {
		return m.Signal
	}
	return nil
}

type SetPowerRequest struct {
	// Is set, power will be turned on, otherwise power will be turned off.
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetPowerRequest) Reset()         { *m = SetPowerRequest{} }
func (m *SetPowerRequest) String() string { return proto.CompactTextString(m) }
func (*SetPowerRequest) ProtoMessage()    {}
func (*SetPowerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a476a990e66ccc93, []int{3}
}
func (m *SetPowerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetPowerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetPowerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetPowerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPowerRequest.Merge(m, src)
}
func (m *SetPowerRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetPowerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPowerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetPowerRequest proto.InternalMessageInfo

func (m *SetPowerRequest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func init() {
	proto.RegisterType((*EnableRunModeRequest)(nil), "binkyrailways.v1.EnableRunModeRequest")
	proto.RegisterType((*GetStateChangesRequest)(nil), "binkyrailways.v1.GetStateChangesRequest")
	proto.RegisterType((*StateChange)(nil), "binkyrailways.v1.StateChange")
	proto.RegisterType((*SetPowerRequest)(nil), "binkyrailways.v1.SetPowerRequest")
}

func init() { proto.RegisterFile("br_state_service.proto", fileDescriptor_a476a990e66ccc93) }

var fileDescriptor_a476a990e66ccc93 = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xe1, 0x6a, 0x13, 0x41,
	0x10, 0xc7, 0x3d, 0xdb, 0x26, 0xe9, 0x54, 0x5b, 0x59, 0x4a, 0x5d, 0x42, 0x8d, 0x36, 0xa0, 0x14,
	0x94, 0xa4, 0x89, 0x28, 0x82, 0x9f, 0x4c, 0x2c, 0xc1, 0x62, 0x50, 0x2e, 0x1f, 0x04, 0x11, 0xca,
	0xde, 0x65, 0x49, 0xcf, 0xdc, 0xdd, 0x9e, 0xbb, 0x7b, 0x29, 0x79, 0x13, 0xdf, 0xc1, 0x17, 0xf1,
	0xa3, 0xbe, 0x81, 0xc4, 0x17, 0x91, 0x9b, 0xbd, 0x6b, 0x2f, 0xbd, 0x0b, 0x01, 0xbf, 0xdd, 0xec,
	0xfc, 0x7f, 0xff, 0xdd, 0x61, 0x66, 0x0e, 0x0e, 0x1c, 0x79, 0xae, 0x34, 0xd3, 0xfc, 0x5c, 0x71,
	0x39, 0xf3, 0x5c, 0xde, 0x8a, 0xa4, 0xd0, 0x82, 0xdc, 0x73, 0xbc, 0x70, 0x3a, 0x97, 0xcc, 0xf3,
	0x2f, 0xd9, 0x5c, 0xb5, 0x66, 0x9d, 0xfa, 0xfe, 0x95, 0x52, 0xcf, 0x23, 0xae, 0x8c, 0x0e, 0x4f,
	0x03, 0x31, 0xe6, 0x7e, 0xfe, 0xb4, 0x79, 0x02, 0xfb, 0xa7, 0x21, 0x73, 0x7c, 0x6e, 0xc7, 0xe1,
	0x50, 0x8c, 0xb9, 0xcd, 0xbf, 0xc5, 0x5c, 0x69, 0x42, 0xa1, 0x3a, 0xf3, 0xa4, 0x8e, 0x99, 0x4f,
	0xad, 0x47, 0xd6, 0x71, 0xcd, 0xce, 0xc2, 0xe6, 0x4b, 0x38, 0x18, 0x70, 0x3d, 0x4a, 0xfc, 0xfb,
	0x17, 0x2c, 0x9c, 0x70, 0x95, 0x31, 0x87, 0xb0, 0xed, 0x08, 0xa1, 0x95, 0x96, 0x2c, 0x4a, 0xa9,
	0xeb, 0x83, 0xe6, 0xef, 0x4d, 0xd8, 0xc9, 0x51, 0xe4, 0x15, 0x54, 0xd3, 0x47, 0xa3, 0x76, 0xa7,
	0xdb, 0x68, 0xdd, 0xac, 0xa4, 0x65, 0x9b, 0x6f, 0xc4, 0xec, 0x4c, 0x4e, 0x9e, 0xc1, 0x86, 0x2f,
	0x5c, 0x7a, 0x1b, 0xa9, 0x7a, 0x91, 0x7a, 0x2f, 0x5c, 0x43, 0x24, 0x32, 0x32, 0x84, 0x5d, 0x57,
	0x04, 0x01, 0x0b, 0xc7, 0xc9, 0xa1, 0x27, 0x42, 0xba, 0x81, 0xe0, 0xe3, 0x22, 0xd8, 0x5f, 0xd2,
	0x19, 0x8f, 0x1b, 0x30, 0xe9, 0xc2, 0x96, 0xe3, 0x0b, 0x77, 0x4a, 0x37, 0xd1, 0xe5, 0xb0, 0xe8,
	0xd2, 0x4b, 0xd2, 0x06, 0x36, 0x52, 0xf2, 0x06, 0x00, 0x3f, 0x06, 0x52, 0xc4, 0x11, 0xdd, 0x42,
	0xf0, 0x68, 0x05, 0x88, 0x1a, 0x43, 0xe7, 0x20, 0xf2, 0x1a, 0x6a, 0x5f, 0xe3, 0xd0, 0xc5, 0xf7,
	0x57, 0xd0, 0xe0, 0x61, 0xd1, 0xe0, 0x2c, 0x55, 0x18, 0xfc, 0x0a, 0x20, 0x2f, 0xa0, 0x22, 0x62,
	0x1d, 0xc5, 0x9a, 0x56, 0x11, 0x7d, 0x50, 0x44, 0x3f, 0x60, 0xde, 0x80, 0xa9, 0x38, 0x29, 0x55,
	0x8a, 0x58, 0x73, 0x5a, 0x5b, 0x55, 0xaa, 0x9d, 0xa4, 0xd3, 0x52, 0x51, 0x9a, 0x5c, 0xa5, 0x78,
	0xa8, 0x84, 0xa4, 0xdb, 0xab, 0xae, 0x1a, 0x61, 0x3e, 0xbd, 0xca, 0x88, 0x11, 0xf3, 0x26, 0x21,
	0xf3, 0x29, 0xac, 0xc4, 0x30, 0x9f, 0x61, 0x18, 0x34, 0x9f, 0xc2, 0xde, 0x88, 0xeb, 0x8f, 0xe2,
	0x92, 0xcb, 0xdc, 0xe0, 0x72, 0x1c, 0xe8, 0x71, 0x36, 0xb8, 0x69, 0xd8, 0xfd, 0xb1, 0x01, 0x77,
	0x10, 0x1f, 0x99, 0xfd, 0x21, 0x67, 0xb0, 0x37, 0xe0, 0x3a, 0x3f, 0x63, 0xe4, 0x7e, 0xf1, 0xde,
	0xd3, 0x20, 0xd2, 0xf3, 0xfa, 0x9a, 0xe1, 0x24, 0x9f, 0xe0, 0xee, 0xd2, 0x1e, 0x91, 0x27, 0x25,
	0x4e, 0x25, 0x8b, 0xb6, 0xd6, 0xf8, 0x1d, 0xec, 0xbe, 0xf5, 0x54, 0xde, 0xf9, 0xbf, 0xdf, 0xf8,
	0x05, 0xeb, 0xcd, 0x6f, 0x2e, 0x39, 0x2e, 0x22, 0xe5, 0xcb, 0x5d, 0x2f, 0xeb, 0xc8, 0xb5, 0xec,
	0xc4, 0x22, 0x43, 0xa8, 0x65, 0xbd, 0x20, 0x47, 0x65, 0x5d, 0x5f, 0xea, 0xd3, 0xba, 0xc7, 0xf6,
	0xfa, 0x3f, 0x17, 0x0d, 0xeb, 0xd7, 0xa2, 0x61, 0xfd, 0x59, 0x34, 0xac, 0xef, 0x7f, 0x1b, 0xb7,
	0x3e, 0x77, 0x26, 0x9e, 0xbe, 0x88, 0x9d, 0x96, 0x2b, 0x82, 0xf6, 0x12, 0xdb, 0xee, 0x25, 0x91,
	0x9d, 0x45, 0xd1, 0x74, 0xd2, 0x66, 0x91, 0xd7, 0x9e, 0x75, 0x9c, 0x0a, 0xfe, 0xe4, 0x9e, 0xff,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x68, 0x2a, 0x04, 0x3c, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StateServiceClient is the client API for StateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateServiceClient interface {
	// Gets the current railway state
	GetRailwayState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RailwayState, error)
	// Enable the run mode of the process.
	EnableRunMode(ctx context.Context, in *EnableRunModeRequest, opts ...grpc.CallOption) (*RailwayState, error)
	// Disable the run mode of the process, switching back to edit mode.
	DisableRunMode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RailwayState, error)
	// Fetch state changes when they happen
	GetStateChanges(ctx context.Context, in *GetStateChangesRequest, opts ...grpc.CallOption) (StateService_GetStateChangesClient, error)
	// Change the requested power state
	SetPower(ctx context.Context, in *SetPowerRequest, opts ...grpc.CallOption) (*RailwayState, error)
}

type stateServiceClient struct {
	cc *grpc.ClientConn
}

func NewStateServiceClient(cc *grpc.ClientConn) StateServiceClient {
	return &stateServiceClient{cc}
}

func (c *stateServiceClient) GetRailwayState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RailwayState, error) {
	out := new(RailwayState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/GetRailwayState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) EnableRunMode(ctx context.Context, in *EnableRunModeRequest, opts ...grpc.CallOption) (*RailwayState, error) {
	out := new(RailwayState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/EnableRunMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) DisableRunMode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RailwayState, error) {
	out := new(RailwayState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/DisableRunMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) GetStateChanges(ctx context.Context, in *GetStateChangesRequest, opts ...grpc.CallOption) (StateService_GetStateChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StateService_serviceDesc.Streams[0], "/binkyrailways.v1.StateService/GetStateChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateServiceGetStateChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StateService_GetStateChangesClient interface {
	Recv() (*StateChange, error)
	grpc.ClientStream
}

type stateServiceGetStateChangesClient struct {
	grpc.ClientStream
}

func (x *stateServiceGetStateChangesClient) Recv() (*StateChange, error) {
	m := new(StateChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stateServiceClient) SetPower(ctx context.Context, in *SetPowerRequest, opts ...grpc.CallOption) (*RailwayState, error) {
	out := new(RailwayState)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.StateService/SetPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateServiceServer is the server API for StateService service.
type StateServiceServer interface {
	// Gets the current railway state
	GetRailwayState(context.Context, *Empty) (*RailwayState, error)
	// Enable the run mode of the process.
	EnableRunMode(context.Context, *EnableRunModeRequest) (*RailwayState, error)
	// Disable the run mode of the process, switching back to edit mode.
	DisableRunMode(context.Context, *Empty) (*RailwayState, error)
	// Fetch state changes when they happen
	GetStateChanges(*GetStateChangesRequest, StateService_GetStateChangesServer) error
	// Change the requested power state
	SetPower(context.Context, *SetPowerRequest) (*RailwayState, error)
}

// UnimplementedStateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStateServiceServer struct {
}

func (*UnimplementedStateServiceServer) GetRailwayState(ctx context.Context, req *Empty) (*RailwayState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRailwayState not implemented")
}
func (*UnimplementedStateServiceServer) EnableRunMode(ctx context.Context, req *EnableRunModeRequest) (*RailwayState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableRunMode not implemented")
}
func (*UnimplementedStateServiceServer) DisableRunMode(ctx context.Context, req *Empty) (*RailwayState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableRunMode not implemented")
}
func (*UnimplementedStateServiceServer) GetStateChanges(req *GetStateChangesRequest, srv StateService_GetStateChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStateChanges not implemented")
}
func (*UnimplementedStateServiceServer) SetPower(ctx context.Context, req *SetPowerRequest) (*RailwayState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPower not implemented")
}

func RegisterStateServiceServer(s *grpc.Server, srv StateServiceServer) {
	s.RegisterService(&_StateService_serviceDesc, srv)
}

func _StateService_GetRailwayState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).GetRailwayState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/GetRailwayState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).GetRailwayState(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_EnableRunMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableRunModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).EnableRunMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/EnableRunMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).EnableRunMode(ctx, req.(*EnableRunModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_DisableRunMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).DisableRunMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/DisableRunMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).DisableRunMode(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_GetStateChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetStateChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateServiceServer).GetStateChanges(m, &stateServiceGetStateChangesServer{stream})
}

type StateService_GetStateChangesServer interface {
	Send(*StateChange) error
	grpc.ServerStream
}

type stateServiceGetStateChangesServer struct {
	grpc.ServerStream
}

func (x *stateServiceGetStateChangesServer) Send(m *StateChange) error {
	return x.ServerStream.SendMsg(m)
}

func _StateService_SetPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).SetPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.StateService/SetPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).SetPower(ctx, req.(*SetPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "binkyrailways.v1.StateService",
	HandlerType: (*StateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRailwayState",
			Handler:    _StateService_GetRailwayState_Handler,
		},
		{
			MethodName: "EnableRunMode",
			Handler:    _StateService_EnableRunMode_Handler,
		},
		{
			MethodName: "DisableRunMode",
			Handler:    _StateService_DisableRunMode_Handler,
		},
		{
			MethodName: "SetPower",
			Handler:    _StateService_SetPower_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStateChanges",
			Handler:       _StateService_GetStateChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "br_state_service.proto",
}

func (m *EnableRunModeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableRunModeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableRunModeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Virtual {
		i--
		if m.Virtual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStateChangesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStateChangesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStateChangesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Bootstrap {
		i--
		if m.Bootstrap {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Signal != nil {
		{
			size, err := m.Signal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Sensor != nil {
		{
			size, err := m.Sensor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Route != nil {
		{
			size, err := m.Route.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Junction != nil {
		{
			size, err := m.Junction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.BlockGroup != nil {
		{
			size, err := m.BlockGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CommandStation != nil {
		{
			size, err := m.CommandStation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Loc != nil {
		{
			size, err := m.Loc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Railway != nil {
		{
			size, err := m.Railway.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetPowerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPowerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetPowerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBrStateService(dAtA []byte, offset int, v uint64) int {
	offset -= sovBrStateService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EnableRunModeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Virtual {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStateChangesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bootstrap {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Railway != nil {
		l = m.Railway.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Loc != nil {
		l = m.Loc.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.CommandStation != nil {
		l = m.CommandStation.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.BlockGroup != nil {
		l = m.BlockGroup.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Junction != nil {
		l = m.Junction.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Route != nil {
		l = m.Route.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Sensor != nil {
		l = m.Sensor.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.Signal != nil {
		l = m.Signal.Size()
		n += 1 + l + sovBrStateService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetPowerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBrStateService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBrStateService(x uint64) (n int) {
	return sovBrStateService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EnableRunModeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableRunModeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableRunModeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Virtual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Virtual = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStateChangesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStateChangesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStateChangesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bootstrap", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bootstrap = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Railway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Railway == nil {
				m.Railway = &RailwayState{}
			}
			if err := m.Railway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Loc == nil {
				m.Loc = &LocState{}
			}
			if err := m.Loc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandStation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommandStation == nil {
				m.CommandStation = &CommandStationState{}
			}
			if err := m.CommandStation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &BlockState{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockGroup == nil {
				m.BlockGroup = &BlockGroupState{}
			}
			if err := m.BlockGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Junction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Junction == nil {
				m.Junction = &JunctionState{}
			}
			if err := m.Junction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &OutputState{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Route == nil {
				m.Route = &RouteState{}
			}
			if err := m.Route.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sensor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sensor == nil {
				m.Sensor = &SensorState{}
			}
			if err := m.Sensor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signal == nil {
				m.Signal = &SignalState{}
			}
			if err := m.Signal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPowerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPowerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPowerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBrStateService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBrStateService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrStateService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBrStateService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBrStateService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBrStateService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBrStateService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBrStateService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBrStateService = fmt.Errorf("proto: unexpected end of group")
)
