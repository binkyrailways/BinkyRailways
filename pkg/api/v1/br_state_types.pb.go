// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: br_state_types.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Railway contrains a description of a single model railway.
type RailwayState struct {
	// Model of the railway
	Model *Railway `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// Set when the server is in run mode (otherwise editing mode)
	IsRunModeEnabled bool `protobuf:"varint,2,opt,name=is_run_mode_enabled,json=isRunModeEnabled,proto3" json:"is_run_mode_enabled,omitempty"`
	// Set when the server is in run mode with virtual mode enabled
	IsVirtualModeEnabled bool     `protobuf:"varint,3,opt,name=is_virtual_mode_enabled,json=isVirtualModeEnabled,proto3" json:"is_virtual_mode_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RailwayState) Reset()         { *m = RailwayState{} }
func (m *RailwayState) String() string { return proto.CompactTextString(m) }
func (*RailwayState) ProtoMessage()    {}
func (*RailwayState) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ba3d7758196798e, []int{0}
}
func (m *RailwayState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RailwayState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RailwayState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RailwayState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RailwayState.Merge(m, src)
}
func (m *RailwayState) XXX_Size() int {
	return m.Size()
}
func (m *RailwayState) XXX_DiscardUnknown() {
	xxx_messageInfo_RailwayState.DiscardUnknown(m)
}

var xxx_messageInfo_RailwayState proto.InternalMessageInfo

func (m *RailwayState) GetModel() *Railway {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *RailwayState) GetIsRunModeEnabled() bool {
	if m != nil {
		return m.IsRunModeEnabled
	}
	return false
}

func (m *RailwayState) GetIsVirtualModeEnabled() bool {
	if m != nil {
		return m.IsVirtualModeEnabled
	}
	return false
}

func init() {
	proto.RegisterType((*RailwayState)(nil), "binkyrailways.v1.RailwayState")
}

func init() { proto.RegisterFile("br_state_types.proto", fileDescriptor_7ba3d7758196798e) }

var fileDescriptor_7ba3d7758196798e = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x49, 0x2a, 0x8a, 0x2f,
	0x2e, 0x49, 0x2c, 0x49, 0x8d, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x12, 0x48, 0xca, 0xcc, 0xcb, 0xae, 0x2c, 0x4a, 0xcc, 0xcc, 0x29, 0x4f, 0xac, 0x2c, 0xd6,
	0x2b, 0x33, 0x94, 0x02, 0xa9, 0xcb, 0xcd, 0x4f, 0x49, 0xcd, 0x41, 0x56, 0xa7, 0xb4, 0x94, 0x91,
	0x8b, 0x27, 0x08, 0xa2, 0x2a, 0x18, 0x64, 0x88, 0x90, 0x3e, 0x17, 0x2b, 0x58, 0x95, 0x04, 0xa3,
	0x02, 0xa3, 0x06, 0xb7, 0x91, 0xa4, 0x1e, 0xba, 0x41, 0x7a, 0x50, 0xe5, 0x41, 0x10, 0x75, 0x42,
	0xba, 0x5c, 0xc2, 0x99, 0xc5, 0xf1, 0x45, 0xa5, 0x79, 0x60, 0xd3, 0xe3, 0x53, 0xf3, 0x12, 0x93,
	0x72, 0x52, 0x53, 0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x82, 0x04, 0x32, 0x8b, 0x83, 0x4a, 0xf3,
	0x7c, 0xf3, 0x53, 0x52, 0x5d, 0x21, 0xe2, 0x42, 0xa6, 0x5c, 0xe2, 0x99, 0xc5, 0xf1, 0x65, 0x99,
	0x45, 0x25, 0xa5, 0x89, 0x39, 0xa8, 0x5a, 0x98, 0xc1, 0x5a, 0x44, 0x32, 0x8b, 0xc3, 0x20, 0xb2,
	0x48, 0xda, 0x9c, 0x9c, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39,
	0xc6, 0x19, 0x8f, 0xe5, 0x18, 0xa2, 0x0c, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3,
	0x73, 0xf5, 0x51, 0xdc, 0xa8, 0xef, 0x04, 0xe2, 0x05, 0xc1, 0x78, 0x05, 0xd9, 0xe9, 0xfa, 0x89,
	0x05, 0x99, 0xfa, 0x65, 0x86, 0x49, 0x6c, 0x60, 0x3f, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x0c, 0x68, 0x4f, 0x73, 0x33, 0x01, 0x00, 0x00,
}

func (m *RailwayState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RailwayState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RailwayState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsVirtualModeEnabled {
		i--
		if m.IsVirtualModeEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsRunModeEnabled {
		i--
		if m.IsRunModeEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Model != nil {
		{
			size, err := m.Model.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBrStateTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBrStateTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovBrStateTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RailwayState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Model != nil {
		l = m.Model.Size()
		n += 1 + l + sovBrStateTypes(uint64(l))
	}
	if m.IsRunModeEnabled {
		n += 2
	}
	if m.IsVirtualModeEnabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBrStateTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBrStateTypes(x uint64) (n int) {
	return sovBrStateTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RailwayState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrStateTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RailwayState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RailwayState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrStateTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBrStateTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model == nil {
				m.Model = &Railway{}
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRunModeEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRunModeEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVirtualModeEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrStateTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVirtualModeEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBrStateTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrStateTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBrStateTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBrStateTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrStateTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrStateTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBrStateTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBrStateTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBrStateTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBrStateTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBrStateTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBrStateTypes = fmt.Errorf("proto: unexpected end of group")
)
