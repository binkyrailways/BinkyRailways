// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: br_model_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BinkyNetObjectsGroupType int32

const (
	BinkyNetObjectsGroupType_MGV93 BinkyNetObjectsGroupType = 0
)

var BinkyNetObjectsGroupType_name = map[int32]string{
	0: "MGV93",
}

var BinkyNetObjectsGroupType_value = map[string]int32{
	"MGV93": 0,
}

func (x BinkyNetObjectsGroupType) String() string {
	return proto.EnumName(BinkyNetObjectsGroupType_name, int32(x))
}

func (BinkyNetObjectsGroupType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{0}
}

// Request by ID
type IDRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDRequest) Reset()         { *m = IDRequest{} }
func (m *IDRequest) String() string { return proto.CompactTextString(m) }
func (*IDRequest) ProtoMessage()    {}
func (*IDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{0}
}
func (m *IDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDRequest.Merge(m, src)
}
func (m *IDRequest) XXX_Size() int {
	return m.Size()
}
func (m *IDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IDRequest proto.InternalMessageInfo

func (m *IDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Request by ID and SubID
type SubIDRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubId                string   `protobuf:"bytes,2,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubIDRequest) Reset()         { *m = SubIDRequest{} }
func (m *SubIDRequest) String() string { return proto.CompactTextString(m) }
func (*SubIDRequest) ProtoMessage()    {}
func (*SubIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{1}
}
func (m *SubIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubIDRequest.Merge(m, src)
}
func (m *SubIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubIDRequest proto.InternalMessageInfo

func (m *SubIDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SubIDRequest) GetSubId() string {
	if m != nil {
		return m.SubId
	}
	return ""
}

// Request by ID with image
type ImageIDRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Image                []byte   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageIDRequest) Reset()         { *m = ImageIDRequest{} }
func (m *ImageIDRequest) String() string { return proto.CompactTextString(m) }
func (*ImageIDRequest) ProtoMessage()    {}
func (*ImageIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{2}
}
func (m *ImageIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageIDRequest.Merge(m, src)
}
func (m *ImageIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImageIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageIDRequest proto.InternalMessageInfo

func (m *ImageIDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ImageIDRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

type ParseAddressRequest struct {
	// Address to parse
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseAddressRequest) Reset()         { *m = ParseAddressRequest{} }
func (m *ParseAddressRequest) String() string { return proto.CompactTextString(m) }
func (*ParseAddressRequest) ProtoMessage()    {}
func (*ParseAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{3}
}
func (m *ParseAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParseAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParseAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParseAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseAddressRequest.Merge(m, src)
}
func (m *ParseAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *ParseAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParseAddressRequest proto.InternalMessageInfo

func (m *ParseAddressRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ParseAddressResult struct {
	// Was the input a valid address?
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// Error message in case of non-valid input
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Formatted address in case of valid input
	FormattedValue       string   `protobuf:"bytes,3,opt,name=formatted_value,json=formattedValue,proto3" json:"formatted_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseAddressResult) Reset()         { *m = ParseAddressResult{} }
func (m *ParseAddressResult) String() string { return proto.CompactTextString(m) }
func (*ParseAddressResult) ProtoMessage()    {}
func (*ParseAddressResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{4}
}
func (m *ParseAddressResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParseAddressResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParseAddressResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParseAddressResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseAddressResult.Merge(m, src)
}
func (m *ParseAddressResult) XXX_Size() int {
	return m.Size()
}
func (m *ParseAddressResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseAddressResult.DiscardUnknown(m)
}

var xxx_messageInfo_ParseAddressResult proto.InternalMessageInfo

func (m *ParseAddressResult) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *ParseAddressResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ParseAddressResult) GetFormattedValue() string {
	if m != nil {
		return m.FormattedValue
	}
	return ""
}

type ParsePermissionRequest struct {
	// Permission to parse
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParsePermissionRequest) Reset()         { *m = ParsePermissionRequest{} }
func (m *ParsePermissionRequest) String() string { return proto.CompactTextString(m) }
func (*ParsePermissionRequest) ProtoMessage()    {}
func (*ParsePermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{5}
}
func (m *ParsePermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParsePermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParsePermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParsePermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParsePermissionRequest.Merge(m, src)
}
func (m *ParsePermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ParsePermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParsePermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParsePermissionRequest proto.InternalMessageInfo

func (m *ParsePermissionRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ParsePermissionResult struct {
	// Was the input a valid permission?
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// Error message in case of non-valid input
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Formatted permission in case of valid input
	FormattedValue       string   `protobuf:"bytes,3,opt,name=formatted_value,json=formattedValue,proto3" json:"formatted_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParsePermissionResult) Reset()         { *m = ParsePermissionResult{} }
func (m *ParsePermissionResult) String() string { return proto.CompactTextString(m) }
func (*ParsePermissionResult) ProtoMessage()    {}
func (*ParsePermissionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{6}
}
func (m *ParsePermissionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParsePermissionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParsePermissionResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParsePermissionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParsePermissionResult.Merge(m, src)
}
func (m *ParsePermissionResult) XXX_Size() int {
	return m.Size()
}
func (m *ParsePermissionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ParsePermissionResult.DiscardUnknown(m)
}

var xxx_messageInfo_ParsePermissionResult proto.InternalMessageInfo

func (m *ParsePermissionResult) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *ParsePermissionResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ParsePermissionResult) GetFormattedValue() string {
	if m != nil {
		return m.FormattedValue
	}
	return ""
}

type AddRouteCrossingJunctionSwitchRequest struct {
	// ID of route to change
	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	// ID of the junction (of type switch) to add
	JunctionId string `protobuf:"bytes,2,opt,name=junction_id,json=junctionId,proto3" json:"junction_id,omitempty"`
	// Direction of the switch to add
	Direction            SwitchDirection `protobuf:"varint,3,opt,name=direction,proto3,enum=binkyrailways.v1.SwitchDirection" json:"direction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AddRouteCrossingJunctionSwitchRequest) Reset()         { *m = AddRouteCrossingJunctionSwitchRequest{} }
func (m *AddRouteCrossingJunctionSwitchRequest) String() string { return proto.CompactTextString(m) }
func (*AddRouteCrossingJunctionSwitchRequest) ProtoMessage()    {}
func (*AddRouteCrossingJunctionSwitchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{7}
}
func (m *AddRouteCrossingJunctionSwitchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRouteCrossingJunctionSwitchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRouteCrossingJunctionSwitchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRouteCrossingJunctionSwitchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRouteCrossingJunctionSwitchRequest.Merge(m, src)
}
func (m *AddRouteCrossingJunctionSwitchRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddRouteCrossingJunctionSwitchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRouteCrossingJunctionSwitchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRouteCrossingJunctionSwitchRequest proto.InternalMessageInfo

func (m *AddRouteCrossingJunctionSwitchRequest) GetRouteId() string {
	if m != nil {
		return m.RouteId
	}
	return ""
}

func (m *AddRouteCrossingJunctionSwitchRequest) GetJunctionId() string {
	if m != nil {
		return m.JunctionId
	}
	return ""
}

func (m *AddRouteCrossingJunctionSwitchRequest) GetDirection() SwitchDirection {
	if m != nil {
		return m.Direction
	}
	return SwitchDirection_STRAIGHT
}

type RemoveRouteCrossingJunctionRequest struct {
	// ID of route to change
	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	// ID of the junction to remove
	JunctionId           string   `protobuf:"bytes,2,opt,name=junction_id,json=junctionId,proto3" json:"junction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveRouteCrossingJunctionRequest) Reset()         { *m = RemoveRouteCrossingJunctionRequest{} }
func (m *RemoveRouteCrossingJunctionRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveRouteCrossingJunctionRequest) ProtoMessage()    {}
func (*RemoveRouteCrossingJunctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{8}
}
func (m *RemoveRouteCrossingJunctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveRouteCrossingJunctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveRouteCrossingJunctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveRouteCrossingJunctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveRouteCrossingJunctionRequest.Merge(m, src)
}
func (m *RemoveRouteCrossingJunctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveRouteCrossingJunctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveRouteCrossingJunctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveRouteCrossingJunctionRequest proto.InternalMessageInfo

func (m *RemoveRouteCrossingJunctionRequest) GetRouteId() string {
	if m != nil {
		return m.RouteId
	}
	return ""
}

func (m *RemoveRouteCrossingJunctionRequest) GetJunctionId() string {
	if m != nil {
		return m.JunctionId
	}
	return ""
}

type AddRouteBinaryOutputRequest struct {
	// ID of route to change
	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	// ID of the output (of type binary output) to add
	OutputId string `protobuf:"bytes,2,opt,name=output_id,json=outputId,proto3" json:"output_id,omitempty"`
	// Desired active status
	Active               bool     `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddRouteBinaryOutputRequest) Reset()         { *m = AddRouteBinaryOutputRequest{} }
func (m *AddRouteBinaryOutputRequest) String() string { return proto.CompactTextString(m) }
func (*AddRouteBinaryOutputRequest) ProtoMessage()    {}
func (*AddRouteBinaryOutputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{9}
}
func (m *AddRouteBinaryOutputRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRouteBinaryOutputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRouteBinaryOutputRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRouteBinaryOutputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRouteBinaryOutputRequest.Merge(m, src)
}
func (m *AddRouteBinaryOutputRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddRouteBinaryOutputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRouteBinaryOutputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRouteBinaryOutputRequest proto.InternalMessageInfo

func (m *AddRouteBinaryOutputRequest) GetRouteId() string {
	if m != nil {
		return m.RouteId
	}
	return ""
}

func (m *AddRouteBinaryOutputRequest) GetOutputId() string {
	if m != nil {
		return m.OutputId
	}
	return ""
}

func (m *AddRouteBinaryOutputRequest) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type RemoveRouteOutputRequest struct {
	// ID of route to change
	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	// ID of the output (of type binary output) to remove
	OutputId             string   `protobuf:"bytes,2,opt,name=output_id,json=outputId,proto3" json:"output_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveRouteOutputRequest) Reset()         { *m = RemoveRouteOutputRequest{} }
func (m *RemoveRouteOutputRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveRouteOutputRequest) ProtoMessage()    {}
func (*RemoveRouteOutputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{10}
}
func (m *RemoveRouteOutputRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveRouteOutputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveRouteOutputRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveRouteOutputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveRouteOutputRequest.Merge(m, src)
}
func (m *RemoveRouteOutputRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveRouteOutputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveRouteOutputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveRouteOutputRequest proto.InternalMessageInfo

func (m *RemoveRouteOutputRequest) GetRouteId() string {
	if m != nil {
		return m.RouteId
	}
	return ""
}

func (m *RemoveRouteOutputRequest) GetOutputId() string {
	if m != nil {
		return m.OutputId
	}
	return ""
}

type AddRouteEventRequest struct {
	// ID of the route to add an event to
	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	// ID of sensor to add event for
	SensorId             string   `protobuf:"bytes,2,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddRouteEventRequest) Reset()         { *m = AddRouteEventRequest{} }
func (m *AddRouteEventRequest) String() string { return proto.CompactTextString(m) }
func (*AddRouteEventRequest) ProtoMessage()    {}
func (*AddRouteEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{11}
}
func (m *AddRouteEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRouteEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRouteEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRouteEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRouteEventRequest.Merge(m, src)
}
func (m *AddRouteEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddRouteEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRouteEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRouteEventRequest proto.InternalMessageInfo

func (m *AddRouteEventRequest) GetRouteId() string {
	if m != nil {
		return m.RouteId
	}
	return ""
}

func (m *AddRouteEventRequest) GetSensorId() string {
	if m != nil {
		return m.SensorId
	}
	return ""
}

type RemoveRouteEventRequest struct {
	// ID of the route to remove an event from
	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	// ID of sensor to remove event for
	SensorId             string   `protobuf:"bytes,2,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveRouteEventRequest) Reset()         { *m = RemoveRouteEventRequest{} }
func (m *RemoveRouteEventRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveRouteEventRequest) ProtoMessage()    {}
func (*RemoveRouteEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{12}
}
func (m *RemoveRouteEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveRouteEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveRouteEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveRouteEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveRouteEventRequest.Merge(m, src)
}
func (m *RemoveRouteEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveRouteEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveRouteEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveRouteEventRequest proto.InternalMessageInfo

func (m *RemoveRouteEventRequest) GetRouteId() string {
	if m != nil {
		return m.RouteId
	}
	return ""
}

func (m *RemoveRouteEventRequest) GetSensorId() string {
	if m != nil {
		return m.SensorId
	}
	return ""
}

type AddRouteEventBehaviorRequest struct {
	// ID of the route to add an event to
	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	// ID of sensor to add a behavior for
	SensorId             string   `protobuf:"bytes,2,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddRouteEventBehaviorRequest) Reset()         { *m = AddRouteEventBehaviorRequest{} }
func (m *AddRouteEventBehaviorRequest) String() string { return proto.CompactTextString(m) }
func (*AddRouteEventBehaviorRequest) ProtoMessage()    {}
func (*AddRouteEventBehaviorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{13}
}
func (m *AddRouteEventBehaviorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRouteEventBehaviorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRouteEventBehaviorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRouteEventBehaviorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRouteEventBehaviorRequest.Merge(m, src)
}
func (m *AddRouteEventBehaviorRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddRouteEventBehaviorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRouteEventBehaviorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRouteEventBehaviorRequest proto.InternalMessageInfo

func (m *AddRouteEventBehaviorRequest) GetRouteId() string {
	if m != nil {
		return m.RouteId
	}
	return ""
}

func (m *AddRouteEventBehaviorRequest) GetSensorId() string {
	if m != nil {
		return m.SensorId
	}
	return ""
}

type RemoveRouteEventBehaviorRequest struct {
	// ID of the route to remove an event from
	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	// ID of sensor to remove behavior for
	SensorId string `protobuf:"bytes,2,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	// Index of the behavior to removed
	Index                int32    `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveRouteEventBehaviorRequest) Reset()         { *m = RemoveRouteEventBehaviorRequest{} }
func (m *RemoveRouteEventBehaviorRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveRouteEventBehaviorRequest) ProtoMessage()    {}
func (*RemoveRouteEventBehaviorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{14}
}
func (m *RemoveRouteEventBehaviorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveRouteEventBehaviorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveRouteEventBehaviorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveRouteEventBehaviorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveRouteEventBehaviorRequest.Merge(m, src)
}
func (m *RemoveRouteEventBehaviorRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveRouteEventBehaviorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveRouteEventBehaviorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveRouteEventBehaviorRequest proto.InternalMessageInfo

func (m *RemoveRouteEventBehaviorRequest) GetRouteId() string {
	if m != nil {
		return m.RouteId
	}
	return ""
}

func (m *RemoveRouteEventBehaviorRequest) GetSensorId() string {
	if m != nil {
		return m.SensorId
	}
	return ""
}

func (m *RemoveRouteEventBehaviorRequest) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type AddBinkyNetObjectsGroupRequest struct {
	// ID of the local worker to create objects in.
	LocalWorkerId string `protobuf:"bytes,1,opt,name=local_worker_id,json=localWorkerId,proto3" json:"local_worker_id,omitempty"`
	// ID of the device to attach objects to.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Type of group
	Type                 BinkyNetObjectsGroupType `protobuf:"varint,3,opt,name=type,proto3,enum=binkyrailways.v1.BinkyNetObjectsGroupType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *AddBinkyNetObjectsGroupRequest) Reset()         { *m = AddBinkyNetObjectsGroupRequest{} }
func (m *AddBinkyNetObjectsGroupRequest) String() string { return proto.CompactTextString(m) }
func (*AddBinkyNetObjectsGroupRequest) ProtoMessage()    {}
func (*AddBinkyNetObjectsGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{15}
}
func (m *AddBinkyNetObjectsGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddBinkyNetObjectsGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddBinkyNetObjectsGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddBinkyNetObjectsGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddBinkyNetObjectsGroupRequest.Merge(m, src)
}
func (m *AddBinkyNetObjectsGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddBinkyNetObjectsGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddBinkyNetObjectsGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddBinkyNetObjectsGroupRequest proto.InternalMessageInfo

func (m *AddBinkyNetObjectsGroupRequest) GetLocalWorkerId() string {
	if m != nil {
		return m.LocalWorkerId
	}
	return ""
}

func (m *AddBinkyNetObjectsGroupRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *AddBinkyNetObjectsGroupRequest) GetType() BinkyNetObjectsGroupType {
	if m != nil {
		return m.Type
	}
	return BinkyNetObjectsGroupType_MGV93
}

func init() {
	proto.RegisterEnum("binkyrailways.v1.BinkyNetObjectsGroupType", BinkyNetObjectsGroupType_name, BinkyNetObjectsGroupType_value)
	proto.RegisterType((*IDRequest)(nil), "binkyrailways.v1.IDRequest")
	proto.RegisterType((*SubIDRequest)(nil), "binkyrailways.v1.SubIDRequest")
	proto.RegisterType((*ImageIDRequest)(nil), "binkyrailways.v1.ImageIDRequest")
	proto.RegisterType((*ParseAddressRequest)(nil), "binkyrailways.v1.ParseAddressRequest")
	proto.RegisterType((*ParseAddressResult)(nil), "binkyrailways.v1.ParseAddressResult")
	proto.RegisterType((*ParsePermissionRequest)(nil), "binkyrailways.v1.ParsePermissionRequest")
	proto.RegisterType((*ParsePermissionResult)(nil), "binkyrailways.v1.ParsePermissionResult")
	proto.RegisterType((*AddRouteCrossingJunctionSwitchRequest)(nil), "binkyrailways.v1.AddRouteCrossingJunctionSwitchRequest")
	proto.RegisterType((*RemoveRouteCrossingJunctionRequest)(nil), "binkyrailways.v1.RemoveRouteCrossingJunctionRequest")
	proto.RegisterType((*AddRouteBinaryOutputRequest)(nil), "binkyrailways.v1.AddRouteBinaryOutputRequest")
	proto.RegisterType((*RemoveRouteOutputRequest)(nil), "binkyrailways.v1.RemoveRouteOutputRequest")
	proto.RegisterType((*AddRouteEventRequest)(nil), "binkyrailways.v1.AddRouteEventRequest")
	proto.RegisterType((*RemoveRouteEventRequest)(nil), "binkyrailways.v1.RemoveRouteEventRequest")
	proto.RegisterType((*AddRouteEventBehaviorRequest)(nil), "binkyrailways.v1.AddRouteEventBehaviorRequest")
	proto.RegisterType((*RemoveRouteEventBehaviorRequest)(nil), "binkyrailways.v1.RemoveRouteEventBehaviorRequest")
	proto.RegisterType((*AddBinkyNetObjectsGroupRequest)(nil), "binkyrailways.v1.AddBinkyNetObjectsGroupRequest")
}

func init() { proto.RegisterFile("br_model_service.proto", fileDescriptor_0d5e66fb0029ff04) }

var fileDescriptor_0d5e66fb0029ff04 = []byte{
	// 1414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xfd, 0x72, 0xda, 0xc6,
	0x17, 0x0d, 0xf9, 0xc5, 0x36, 0x5c, 0x63, 0xec, 0xec, 0x0f, 0x13, 0x8c, 0x33, 0x24, 0xd5, 0xd4,
	0xf9, 0xea, 0x14, 0xd7, 0x49, 0x3f, 0x92, 0x99, 0x4c, 0x12, 0x30, 0x0e, 0xc1, 0x13, 0x3b, 0xae,
	0x68, 0xdd, 0x8e, 0x9b, 0x96, 0x08, 0x76, 0x83, 0x15, 0x23, 0x89, 0xea, 0x03, 0x97, 0x37, 0xe9,
	0x03, 0xb4, 0xef, 0xd2, 0x3f, 0xfb, 0x04, 0x9d, 0x8e, 0xfb, 0x22, 0x1d, 0xed, 0x4a, 0x42, 0x20,
	0xad, 0x10, 0x98, 0xfe, 0xe7, 0xbb, 0xba, 0xe7, 0xdc, 0xb3, 0x07, 0xe9, 0x4a, 0x7b, 0x0d, 0xb9,
	0x96, 0xde, 0x54, 0x34, 0x4c, 0xba, 0x4d, 0x83, 0xe8, 0x7d, 0xb9, 0x4d, 0x4a, 0x3d, 0x5d, 0x33,
	0x35, 0xb4, 0xd6, 0x92, 0xd5, 0xb3, 0x81, 0x2e, 0xc9, 0xdd, 0x73, 0x69, 0x60, 0x94, 0xfa, 0x3b,
	0x85, 0xac, 0x97, 0x69, 0x0e, 0x7a, 0xc4, 0x60, 0x79, 0xc2, 0x26, 0xa4, 0xea, 0x55, 0x91, 0xfc,
	0x6c, 0x11, 0xc3, 0x44, 0x19, 0xb8, 0x2a, 0xe3, 0x7c, 0xe2, 0x76, 0xe2, 0x5e, 0x4a, 0xbc, 0x2a,
	0x63, 0xe1, 0x0b, 0x48, 0x37, 0xac, 0x16, 0xf7, 0x3a, 0x5a, 0x87, 0x45, 0xc3, 0x6a, 0x35, 0x65,
	0x9c, 0xbf, 0x4a, 0xd7, 0x16, 0x0c, 0xab, 0x55, 0xc7, 0xc2, 0x97, 0x90, 0xa9, 0x2b, 0x52, 0x87,
	0xf0, 0x81, 0x59, 0x58, 0x90, 0xed, 0x0c, 0x8a, 0x4b, 0x8b, 0x2c, 0x10, 0x3e, 0x81, 0xff, 0x1f,
	0x49, 0xba, 0x41, 0xca, 0x18, 0xeb, 0xc4, 0x30, 0x5c, 0x70, 0x16, 0x16, 0xfa, 0x52, 0xd7, 0x22,
	0x0e, 0x9e, 0x05, 0x82, 0x02, 0x68, 0x34, 0xd9, 0xb0, 0xba, 0x6e, 0xae, 0x53, 0x2b, 0x29, 0xb2,
	0x00, 0xe5, 0x61, 0x49, 0x21, 0x86, 0xe1, 0x16, 0x4c, 0x89, 0x6e, 0x88, 0xee, 0xc2, 0xea, 0x7b,
	0x4d, 0x57, 0x24, 0xd3, 0x24, 0xb8, 0xc9, 0xaa, 0xfc, 0x8f, 0x66, 0x64, 0xbc, 0xe5, 0x63, 0x5a,
	0xae, 0x04, 0x39, 0x5a, 0xee, 0x88, 0xe8, 0x8a, 0x6c, 0x18, 0xb2, 0xa6, 0x46, 0xcb, 0xeb, 0xc1,
	0x7a, 0x20, 0xff, 0xbf, 0x55, 0xf8, 0x5b, 0x02, 0xb6, 0xca, 0x18, 0x8b, 0x9a, 0x65, 0x92, 0x5d,
	0x5d, 0x33, 0x0c, 0x59, 0xed, 0xec, 0x5b, 0x6a, 0xdb, 0x94, 0x35, 0xb5, 0x71, 0x2e, 0x9b, 0xed,
	0x53, 0x57, 0xf1, 0x06, 0x24, 0x75, 0x3b, 0xab, 0xe9, 0xfd, 0x26, 0x4b, 0x34, 0xae, 0x63, 0x74,
	0x0b, 0x96, 0x3f, 0x38, 0x98, 0xe1, 0xcf, 0x0a, 0xee, 0x52, 0x1d, 0xa3, 0xe7, 0x90, 0xc2, 0xb2,
	0x4e, 0x68, 0x48, 0x85, 0x64, 0x1e, 0x7e, 0x54, 0x1a, 0xbf, 0xd7, 0x4a, 0xac, 0x5e, 0xd5, 0x4d,
	0x14, 0x87, 0x18, 0xe1, 0x1d, 0x08, 0x22, 0x51, 0xb4, 0x3e, 0x09, 0x15, 0x3a, 0x07, 0x89, 0x82,
	0x02, 0x9b, 0xae, 0x0f, 0x15, 0x59, 0x95, 0xf4, 0xc1, 0x1b, 0xcb, 0xec, 0x59, 0x66, 0x0c, 0xea,
	0x4d, 0x48, 0x69, 0x34, 0x77, 0x48, 0x9c, 0x64, 0x0b, 0x75, 0x8c, 0x72, 0xb0, 0x28, 0xb5, 0x4d,
	0xb9, 0xcf, 0xfc, 0x4f, 0x8a, 0x4e, 0x24, 0x88, 0x90, 0xf7, 0x6d, 0x68, 0x2e, 0xb5, 0x84, 0x43,
	0xc8, 0xba, 0x5b, 0xd8, 0xeb, 0x13, 0x35, 0x26, 0x9f, 0x41, 0x54, 0x43, 0xd3, 0x7d, 0x7c, 0x6c,
	0xa1, 0x8e, 0x85, 0xaf, 0xe1, 0x86, 0x4f, 0xe3, 0x5c, 0x28, 0x8f, 0xe1, 0xe6, 0x88, 0xc4, 0x0a,
	0x39, 0x95, 0xfa, 0xb2, 0xa6, 0x5f, 0x96, 0x57, 0x83, 0x5b, 0xe3, 0x52, 0xe7, 0x44, 0x4d, 0xbb,
	0x8e, 0x8a, 0xc9, 0x2f, 0xf4, 0x07, 0x5c, 0x10, 0x59, 0x20, 0xfc, 0x9e, 0x80, 0x62, 0x19, 0xe3,
	0x8a, 0x7d, 0x0f, 0x1f, 0x12, 0xf3, 0x4d, 0xeb, 0x03, 0x69, 0x9b, 0x46, 0x4d, 0xd7, 0xac, 0x9e,
	0x5b, 0xf0, 0x0e, 0xac, 0x76, 0xb5, 0xb6, 0xd4, 0x6d, 0x9e, 0x6b, 0xfa, 0x19, 0xd1, 0x87, 0x75,
	0x57, 0xe8, 0xf2, 0x77, 0x74, 0x95, 0x55, 0xc7, 0xc4, 0x6e, 0xc2, 0xbe, 0xea, 0x6c, 0xa1, 0x8e,
	0xd1, 0x33, 0xb8, 0x66, 0x37, 0x5e, 0xe7, 0xa1, 0x79, 0x10, 0x7c, 0x68, 0xc2, 0x14, 0x7c, 0x33,
	0xe8, 0x11, 0x91, 0xe2, 0x1e, 0x6c, 0x41, 0x9e, 0x97, 0x81, 0x52, 0xb0, 0x70, 0x50, 0x3b, 0x7e,
	0xf2, 0x68, 0xed, 0xca, 0xc3, 0xbf, 0xee, 0x43, 0xfa, 0xc0, 0x6e, 0xf3, 0x0d, 0xf6, 0x3e, 0x40,
	0x3f, 0x40, 0xda, 0xdf, 0x28, 0xd1, 0x56, 0xb0, 0x72, 0x48, 0xd7, 0x2d, 0x7c, 0x3c, 0x29, 0x8d,
	0x76, 0x33, 0x0c, 0xab, 0x63, 0x6d, 0x0e, 0xdd, 0xe3, 0x00, 0x03, 0x9d, 0xb3, 0x70, 0x37, 0x46,
	0x26, 0xad, 0xf2, 0x02, 0xa0, 0x46, 0x4c, 0x91, 0xe5, 0xa1, 0x1b, 0x41, 0xd8, 0x9e, 0xd2, 0x33,
	0x07, 0x85, 0x8d, 0xe0, 0x05, 0x17, 0xb3, 0x07, 0x2b, 0xdf, 0xf6, 0xb0, 0x64, 0x12, 0x77, 0x81,
	0x9f, 0x1b, 0x45, 0xf3, 0x18, 0xae, 0x35, 0xa4, 0x3e, 0xe1, 0x4b, 0xe0, 0x5d, 0x40, 0x15, 0x48,
	0xd5, 0x88, 0x79, 0xa0, 0x61, 0xab, 0x4b, 0xd0, 0x66, 0x30, 0xcb, 0x7b, 0x57, 0x16, 0xf2, 0xc1,
	0x8b, 0x0e, 0xec, 0x08, 0xf2, 0x1e, 0x47, 0x45, 0x6a, 0x9f, 0x75, 0x74, 0xcd, 0x52, 0x31, 0x7d,
	0xd5, 0x46, 0x53, 0x86, 0xa8, 0x62, 0xa8, 0x0a, 0xa4, 0x99, 0x2d, 0x4e, 0x05, 0x6e, 0xed, 0x08,
	0x55, 0xcf, 0x20, 0x55, 0xc6, 0xd8, 0x09, 0xb8, 0xc6, 0xf0, 0xf1, 0x55, 0x48, 0x57, 0x49, 0x97,
	0x78, 0x1a, 0xa6, 0xdd, 0x09, 0xf3, 0xf7, 0x29, 0x2c, 0xd6, 0x88, 0xf9, 0x5a, 0x6b, 0x47, 0xe3,
	0xd7, 0x83, 0x17, 0x6d, 0xcc, 0x13, 0x48, 0x31, 0x1f, 0xec, 0x20, 0x3c, 0x87, 0x07, 0xad, 0x43,
	0xc6, 0x83, 0x32, 0x53, 0x6f, 0x73, 0xdc, 0x9e, 0xa8, 0xe2, 0x31, 0x2c, 0x96, 0x31, 0xb6, 0xff,
	0xe2, 0xda, 0xc8, 0x41, 0x96, 0x21, 0xc5, 0x3c, 0x9c, 0x68, 0x00, 0xd7, 0xc0, 0x97, 0xb0, 0xcc,
	0x0c, 0xa4, 0x5d, 0x25, 0x9a, 0xa4, 0x10, 0xaa, 0x82, 0x01, 0x5f, 0xf9, 0xfc, 0x60, 0x2b, 0x11,
	0xd9, 0x91, 0x4c, 0x15, 0x58, 0x66, 0x76, 0xb0, 0x90, 0xeb, 0x49, 0x14, 0xc7, 0x4b, 0xc8, 0x78,
	0xc6, 0xc4, 0xd8, 0x18, 0xd7, 0x1d, 0x11, 0xae, 0xd7, 0x88, 0xb9, 0xab, 0x29, 0x8a, 0xa4, 0xe2,
	0x86, 0x29, 0xd9, 0x9f, 0x1a, 0xd1, 0x54, 0x21, 0x77, 0xc1, 0x18, 0xfc, 0x04, 0xb2, 0xcc, 0xa9,
	0xb1, 0xf5, 0x89, 0xc8, 0x18, 0xdc, 0x2f, 0x20, 0x59, 0x23, 0x66, 0xa5, 0xab, 0xb5, 0xcf, 0xa6,
	0xde, 0x31, 0x43, 0x3d, 0x87, 0x65, 0xa6, 0x8e, 0x85, 0xbc, 0x3c, 0x3e, 0xc1, 0x0b, 0x48, 0xda,
	0xaf, 0xd5, 0x4b, 0x48, 0xa8, 0xc2, 0x32, 0xfb, 0xf1, 0x62, 0x90, 0xf0, 0xfb, 0xcb, 0x3e, 0xac,
	0xb8, 0x56, 0xc4, 0xb8, 0x03, 0x6e, 0x72, 0xc4, 0x30, 0xe8, 0x21, 0xac, 0xf9, 0x4c, 0x61, 0x6b,
	0x91, 0x88, 0x09, 0x7c, 0xfb, 0xb0, 0xe2, 0x7a, 0x74, 0x69, 0x6d, 0x75, 0x58, 0xf3, 0xb9, 0x15,
	0x83, 0x2e, 0xaa, 0xa5, 0x2f, 0xd5, 0x88, 0xb9, 0x87, 0x27, 0xbd, 0x57, 0x72, 0x21, 0x8f, 0x8b,
	0x0d, 0x7a, 0x0a, 0xc0, 0x6c, 0xa2, 0x11, 0x27, 0x8b, 0x8b, 0x7e, 0x06, 0x4b, 0x65, 0x8c, 0x67,
	0xaf, 0xbe, 0x0b, 0xc0, 0x8c, 0x98, 0x4c, 0xc1, 0xb7, 0x80, 0xb5, 0x43, 0xf7, 0x58, 0x32, 0x75,
	0x3b, 0xf4, 0x80, 0x5e, 0x3b, 0xf4, 0x56, 0x22, 0xb2, 0x23, 0x99, 0xaa, 0xf4, 0x3d, 0xcb, 0x4e,
	0x56, 0xb3, 0xeb, 0xa9, 0xb9, 0x0d, 0x31, 0xde, 0xd6, 0xf8, 0x06, 0xb1, 0x0f, 0x1a, 0x76, 0xdc,
	0x99, 0x9a, 0xc3, 0x81, 0x79, 0x9f, 0x1f, 0x4e, 0xcc, 0xcd, 0x8c, 0xe0, 0x78, 0x05, 0xab, 0xec,
	0xeb, 0xdd, 0x3b, 0xe8, 0xcd, 0xaa, 0x66, 0xcf, 0xfd, 0x10, 0x99, 0x91, 0xc6, 0x31, 0x86, 0xb5,
	0x5e, 0x7a, 0x7a, 0x99, 0xba, 0xef, 0x31, 0x94, 0xd7, 0x7a, 0x59, 0xc8, 0xcb, 0xe3, 0x13, 0xb0,
	0xd6, 0x7b, 0x19, 0x09, 0x5e, 0xeb, 0x8d, 0x41, 0xc2, 0xb7, 0x42, 0xa7, 0x27, 0xab, 0x88, 0x89,
	0x04, 0xfa, 0x2a, 0x88, 0x8d, 0x35, 0xc3, 0xe0, 0x2b, 0xef, 0xc2, 0x66, 0xc4, 0x7c, 0x01, 0x7d,
	0x1e, 0x82, 0x9b, 0x38, 0x8e, 0xe0, 0x57, 0xfb, 0x69, 0x78, 0x50, 0x1f, 0xb9, 0x05, 0x3f, 0xe5,
	0xef, 0x2b, 0x64, 0x26, 0xc1, 0xe7, 0xff, 0x1e, 0xae, 0x07, 0x86, 0x0b, 0xe8, 0x41, 0xe4, 0x1e,
	0x62, 0x32, 0x1f, 0xd1, 0x57, 0xcf, 0xf0, 0x90, 0x8d, 0xee, 0xf0, 0x25, 0xfb, 0x07, 0x06, 0x7c,
	0xc6, 0x63, 0x58, 0x1b, 0x3f, 0xb9, 0xa3, 0xfb, 0x91, 0x52, 0xe3, 0xf1, 0xbe, 0x83, 0xf5, 0xd0,
	0x49, 0x03, 0x2a, 0x4d, 0x50, 0x3c, 0x36, 0x37, 0xe0, 0x57, 0x78, 0x3f, 0x32, 0xc2, 0x19, 0x2d,
	0xb2, 0x33, 0x79, 0x07, 0xb1, 0xeb, 0xb0, 0x9e, 0xd9, 0xa0, 0xf3, 0x88, 0xa9, 0x9f, 0x29, 0x07,
	0xe6, 0xf5, 0x4c, 0x27, 0xe6, 0x66, 0x46, 0x70, 0xf8, 0x7b, 0xe6, 0xe5, 0xd4, 0x78, 0x3d, 0x73,
	0x46, 0x9a, 0x91, 0x97, 0x49, 0x43, 0xee, 0xa8, 0x52, 0x77, 0x7a, 0x29, 0x0c, 0x36, 0x34, 0x86,
	0xc5, 0xdc, 0xcc, 0x08, 0x8e, 0xe1, 0x76, 0x66, 0x93, 0xe2, 0x6c, 0xe7, 0x2d, 0xe4, 0xec, 0x4f,
	0x4e, 0x67, 0x5a, 0xf3, 0x7a, 0x38, 0x23, 0x8a, 0x26, 0xdc, 0xe2, 0xcf, 0x84, 0xfc, 0x1c, 0x32,
	0x6c, 0x38, 0x1f, 0xa1, 0x21, 0x17, 0xe3, 0x71, 0xc4, 0x2d, 0x75, 0x02, 0x1b, 0xce, 0x37, 0xe5,
	0xb4, 0x7b, 0x99, 0x7c, 0x44, 0x79, 0x0b, 0x39, 0xdf, 0xd8, 0x6d, 0xde, 0x26, 0x89, 0x70, 0xdd,
	0xc7, 0x5e, 0xa5, 0x43, 0xb8, 0xa9, 0x15, 0x8f, 0xc1, 0x7f, 0x84, 0xec, 0xa8, 0x1b, 0xce, 0x7a,
	0x31, 0xe4, 0x7e, 0xf2, 0xfd, 0xdb, 0x64, 0x36, 0xc9, 0x6c, 0xc6, 0x37, 0xb3, 0x64, 0x07, 0x1e,
	0x90, 0xec, 0xac, 0xcf, 0x49, 0xb2, 0x0e, 0x37, 0x38, 0xa3, 0x53, 0xf4, 0x59, 0x68, 0x73, 0x8e,
	0x98, 0xb2, 0xc6, 0xac, 0x59, 0xd9, 0xfd, 0xe3, 0xa2, 0x98, 0xf8, 0xf3, 0xa2, 0x98, 0xf8, 0xfb,
	0xa2, 0x98, 0xf8, 0xf5, 0x9f, 0xe2, 0x95, 0x93, 0x9d, 0x8e, 0x6c, 0x9e, 0x5a, 0xad, 0x52, 0x5b,
	0x53, 0xb6, 0x47, 0x28, 0xb6, 0x29, 0x5e, 0x74, 0xa3, 0xde, 0x59, 0x67, 0x5b, 0xea, 0xc9, 0xdb,
	0xfd, 0x9d, 0xd6, 0x22, 0xfd, 0xef, 0xd7, 0xa3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xe2,
	0xeb, 0xc2, 0x3f, 0x1b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ModelServiceClient is the client API for ModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ModelServiceClient interface {
	// Try to parse an address
	ParseAddress(ctx context.Context, in *ParseAddressRequest, opts ...grpc.CallOption) (*ParseAddressResult, error)
	// Try to parse a permission
	ParsePermission(ctx context.Context, in *ParsePermissionRequest, opts ...grpc.CallOption) (*ParsePermissionResult, error)
	// Gets the current railway
	GetRailway(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Railway, error)
	// Update the current railway
	UpdateRailway(ctx context.Context, in *Railway, opts ...grpc.CallOption) (*Railway, error)
	// Save changes to disk
	Save(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Gets a module by ID.
	GetModule(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error)
	// Get the background image of a module by ID.
	GetModuleBackgroundImage(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Image, error)
	// Update a module by ID.
	UpdateModule(ctx context.Context, in *Module, opts ...grpc.CallOption) (*Module, error)
	// Adds a new module.
	AddModule(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Module, error)
	// Delete the module with the given ID.
	DeleteModule(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Empty, error)
	// Gets a loc by ID.
	GetLoc(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Loc, error)
	// Update a loc by ID.
	UpdateLoc(ctx context.Context, in *Loc, opts ...grpc.CallOption) (*Loc, error)
	// Update the image of a loc by ID.
	UpdateLocImage(ctx context.Context, in *ImageIDRequest, opts ...grpc.CallOption) (*Loc, error)
	// Adds a new loc.
	AddLoc(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Loc, error)
	// Delete the loc with the given ID.
	DeleteLoc(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Empty, error)
	// Gets a loc group by ID.
	GetLocGroup(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*LocGroup, error)
	// Update a loc group by ID.
	UpdateLocGroup(ctx context.Context, in *LocGroup, opts ...grpc.CallOption) (*LocGroup, error)
	// Adds a new loc group.
	AddLocGroup(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LocGroup, error)
	// Delete the loc group with the given ID.
	DeleteLocGroup(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Empty, error)
	// Gets a command station by ID.
	GetCommandStation(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*CommandStation, error)
	// Update a command station  by ID.
	UpdateCommandStation(ctx context.Context, in *CommandStation, opts ...grpc.CallOption) (*CommandStation, error)
	// Gets a block by ID.
	GetBlock(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Block, error)
	// Update a block by ID.
	UpdateBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Block, error)
	// Adds a new block in the module identified by given by ID.
	AddBlock(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Block, error)
	// Delete the block with the given ID.
	DeleteBlock(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error)
	// Gets a block group by ID.
	GetBlockGroup(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BlockGroup, error)
	// Update a block group by ID.
	UpdateBlockGroup(ctx context.Context, in *BlockGroup, opts ...grpc.CallOption) (*BlockGroup, error)
	// Adds a new block group in the module identified by given by ID.
	AddBlockGroup(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BlockGroup, error)
	// Delete the block group with the given ID.
	DeleteBlockGroup(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error)
	// Gets an edge by ID.
	GetEdge(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Edge, error)
	// Update an edge by ID.
	UpdateEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*Edge, error)
	// Adds a new edge in the module identified by given by ID.
	AddEdge(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Edge, error)
	// Delete the edge with the given ID.
	DeleteEdge(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error)
	// Gets a Junction by ID.
	GetJunction(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Junction, error)
	// Update a Junction by ID.
	UpdateJunction(ctx context.Context, in *Junction, opts ...grpc.CallOption) (*Junction, error)
	// Adds a new junction of type switch in the module identified by given by ID.
	AddSwitch(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Junction, error)
	// Delete the junction with the given ID.
	DeleteJunction(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error)
	// Gets a Output by ID.
	GetOutput(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Output, error)
	// Update a Output by ID.
	UpdateOutput(ctx context.Context, in *Output, opts ...grpc.CallOption) (*Output, error)
	// Adds a new output of type binary output in the module identified by given
	// by ID.
	AddBinaryOutput(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Output, error)
	// Delete the output with the given ID.
	DeleteOutput(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error)
	// Gets a Route by ID.
	GetRoute(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Route, error)
	// Update a Route by ID.
	UpdateRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*Route, error)
	// Adds a new block in the module identified by given by ID.
	AddRoute(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Route, error)
	// Delete the route with the given ID.
	DeleteRoute(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error)
	// Adds a crossing junction (of type switch) with given junction ID & switch direction.
	AddRouteCrossingJunctionSwitch(ctx context.Context, in *AddRouteCrossingJunctionSwitchRequest, opts ...grpc.CallOption) (*Route, error)
	// Removes a crossing junction with given junction ID.
	RemoveRouteCrossingJunction(ctx context.Context, in *RemoveRouteCrossingJunctionRequest, opts ...grpc.CallOption) (*Route, error)
	// Adds an output (of type binary output) with given output ID & active status.
	AddRouteBinaryOutput(ctx context.Context, in *AddRouteBinaryOutputRequest, opts ...grpc.CallOption) (*Route, error)
	// Removes an output with given output ID.
	RemoveRouteOutput(ctx context.Context, in *RemoveRouteOutputRequest, opts ...grpc.CallOption) (*Route, error)
	// Adds an event to the given route
	AddRouteEvent(ctx context.Context, in *AddRouteEventRequest, opts ...grpc.CallOption) (*Route, error)
	// Remove an event from the given route
	RemoveRouteEvent(ctx context.Context, in *RemoveRouteEventRequest, opts ...grpc.CallOption) (*Route, error)
	// Adds a behavior to an event in the given route
	AddRouteEventBehavior(ctx context.Context, in *AddRouteEventBehaviorRequest, opts ...grpc.CallOption) (*Route, error)
	// Remove a behavior from an event in the given route
	RemoveRouteEventBehavior(ctx context.Context, in *RemoveRouteEventBehaviorRequest, opts ...grpc.CallOption) (*Route, error)
	// Gets a Sensor by ID.
	GetSensor(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Sensor, error)
	// Update a Sensor by ID.
	UpdateSensor(ctx context.Context, in *Sensor, opts ...grpc.CallOption) (*Sensor, error)
	// Adds a new sensor of type binary sensor in the module identified by given
	// by ID.
	AddBinarySensor(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Sensor, error)
	// Delete the sensor with the given ID.
	DeleteSensor(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error)
	// Gets a Signal by ID.
	GetSignal(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Signal, error)
	// Update a Signal by ID.
	UpdateSignal(ctx context.Context, in *Signal, opts ...grpc.CallOption) (*Signal, error)
	// Delete the signal with the given ID.
	DeleteSignal(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error)
	// Gets a BinkyNetLocalWorker by ID.
	GetBinkyNetLocalWorker(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BinkyNetLocalWorker, error)
	// Update a BinkyNetLocalWorker by ID.
	UpdateBinkyNetLocalWorker(ctx context.Context, in *BinkyNetLocalWorker, opts ...grpc.CallOption) (*BinkyNetLocalWorker, error)
	// Delete the BinkyNetLocalWorker with the given ID.
	DeleteBinkyNetLocalWorker(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*CommandStation, error)
	// Adds a new BinkyNetLocalWorker to the command station identified by given
	// by ID.
	AddBinkyNetLocalWorker(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BinkyNetLocalWorker, error)
	// Adds a new BinkyNetDevice to the binkynet local worker identified by given
	// by ID.
	AddBinkyNetDevice(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BinkyNetDevice, error)
	// Delete the BinkyNetDevice with the given SubID in local worker with given id.
	DeleteBinkyNetDevice(ctx context.Context, in *SubIDRequest, opts ...grpc.CallOption) (*BinkyNetLocalWorker, error)
	// Adds a new BinkyNetObject to the binkynet local worker identified by given
	// by ID.
	AddBinkyNetObject(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BinkyNetObject, error)
	// Delete the BinkyNetObject with the given SubID in local worker with given id.
	DeleteBinkyNetObject(ctx context.Context, in *SubIDRequest, opts ...grpc.CallOption) (*BinkyNetLocalWorker, error)
	// Adds one or more new BinkyNetObject to the binkynet local worker identified by given
	// by ID and attach them to the given device.
	AddBinkyNetObjectsGroup(ctx context.Context, in *AddBinkyNetObjectsGroupRequest, opts ...grpc.CallOption) (*BinkyNetLocalWorker, error)
}

type modelServiceClient struct {
	cc *grpc.ClientConn
}

func NewModelServiceClient(cc *grpc.ClientConn) ModelServiceClient {
	return &modelServiceClient{cc}
}

func (c *modelServiceClient) ParseAddress(ctx context.Context, in *ParseAddressRequest, opts ...grpc.CallOption) (*ParseAddressResult, error) {
	out := new(ParseAddressResult)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/ParseAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) ParsePermission(ctx context.Context, in *ParsePermissionRequest, opts ...grpc.CallOption) (*ParsePermissionResult, error) {
	out := new(ParsePermissionResult)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/ParsePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetRailway(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Railway, error) {
	out := new(Railway)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetRailway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateRailway(ctx context.Context, in *Railway, opts ...grpc.CallOption) (*Railway, error) {
	out := new(Railway)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateRailway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) Save(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModule(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModuleBackgroundImage(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetModuleBackgroundImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateModule(ctx context.Context, in *Module, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddModule(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteModule(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/DeleteModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetLoc(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Loc, error) {
	out := new(Loc)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetLoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateLoc(ctx context.Context, in *Loc, opts ...grpc.CallOption) (*Loc, error) {
	out := new(Loc)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateLoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateLocImage(ctx context.Context, in *ImageIDRequest, opts ...grpc.CallOption) (*Loc, error) {
	out := new(Loc)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateLocImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddLoc(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Loc, error) {
	out := new(Loc)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddLoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteLoc(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/DeleteLoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetLocGroup(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*LocGroup, error) {
	out := new(LocGroup)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetLocGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateLocGroup(ctx context.Context, in *LocGroup, opts ...grpc.CallOption) (*LocGroup, error) {
	out := new(LocGroup)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateLocGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddLocGroup(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LocGroup, error) {
	out := new(LocGroup)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddLocGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteLocGroup(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/DeleteLocGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetCommandStation(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*CommandStation, error) {
	out := new(CommandStation)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetCommandStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateCommandStation(ctx context.Context, in *CommandStation, opts ...grpc.CallOption) (*CommandStation, error) {
	out := new(CommandStation)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateCommandStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetBlock(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddBlock(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteBlock(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/DeleteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetBlockGroup(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BlockGroup, error) {
	out := new(BlockGroup)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetBlockGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateBlockGroup(ctx context.Context, in *BlockGroup, opts ...grpc.CallOption) (*BlockGroup, error) {
	out := new(BlockGroup)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateBlockGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddBlockGroup(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BlockGroup, error) {
	out := new(BlockGroup)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddBlockGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteBlockGroup(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/DeleteBlockGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetEdge(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddEdge(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteEdge(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/DeleteEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetJunction(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Junction, error) {
	out := new(Junction)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetJunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateJunction(ctx context.Context, in *Junction, opts ...grpc.CallOption) (*Junction, error) {
	out := new(Junction)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateJunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddSwitch(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Junction, error) {
	out := new(Junction)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteJunction(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/DeleteJunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetOutput(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateOutput(ctx context.Context, in *Output, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddBinaryOutput(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddBinaryOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteOutput(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/DeleteOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetRoute(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddRoute(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteRoute(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/DeleteRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddRouteCrossingJunctionSwitch(ctx context.Context, in *AddRouteCrossingJunctionSwitchRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddRouteCrossingJunctionSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) RemoveRouteCrossingJunction(ctx context.Context, in *RemoveRouteCrossingJunctionRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/RemoveRouteCrossingJunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddRouteBinaryOutput(ctx context.Context, in *AddRouteBinaryOutputRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddRouteBinaryOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) RemoveRouteOutput(ctx context.Context, in *RemoveRouteOutputRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/RemoveRouteOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddRouteEvent(ctx context.Context, in *AddRouteEventRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddRouteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) RemoveRouteEvent(ctx context.Context, in *RemoveRouteEventRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/RemoveRouteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddRouteEventBehavior(ctx context.Context, in *AddRouteEventBehaviorRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddRouteEventBehavior", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) RemoveRouteEventBehavior(ctx context.Context, in *RemoveRouteEventBehaviorRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/RemoveRouteEventBehavior", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetSensor(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Sensor, error) {
	out := new(Sensor)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateSensor(ctx context.Context, in *Sensor, opts ...grpc.CallOption) (*Sensor, error) {
	out := new(Sensor)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddBinarySensor(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Sensor, error) {
	out := new(Sensor)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddBinarySensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteSensor(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/DeleteSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetSignal(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Signal, error) {
	out := new(Signal)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateSignal(ctx context.Context, in *Signal, opts ...grpc.CallOption) (*Signal, error) {
	out := new(Signal)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteSignal(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/DeleteSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetBinkyNetLocalWorker(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BinkyNetLocalWorker, error) {
	out := new(BinkyNetLocalWorker)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetBinkyNetLocalWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateBinkyNetLocalWorker(ctx context.Context, in *BinkyNetLocalWorker, opts ...grpc.CallOption) (*BinkyNetLocalWorker, error) {
	out := new(BinkyNetLocalWorker)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateBinkyNetLocalWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteBinkyNetLocalWorker(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*CommandStation, error) {
	out := new(CommandStation)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/DeleteBinkyNetLocalWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddBinkyNetLocalWorker(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BinkyNetLocalWorker, error) {
	out := new(BinkyNetLocalWorker)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddBinkyNetLocalWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddBinkyNetDevice(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BinkyNetDevice, error) {
	out := new(BinkyNetDevice)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddBinkyNetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteBinkyNetDevice(ctx context.Context, in *SubIDRequest, opts ...grpc.CallOption) (*BinkyNetLocalWorker, error) {
	out := new(BinkyNetLocalWorker)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/DeleteBinkyNetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddBinkyNetObject(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BinkyNetObject, error) {
	out := new(BinkyNetObject)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddBinkyNetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteBinkyNetObject(ctx context.Context, in *SubIDRequest, opts ...grpc.CallOption) (*BinkyNetLocalWorker, error) {
	out := new(BinkyNetLocalWorker)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/DeleteBinkyNetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AddBinkyNetObjectsGroup(ctx context.Context, in *AddBinkyNetObjectsGroupRequest, opts ...grpc.CallOption) (*BinkyNetLocalWorker, error) {
	out := new(BinkyNetLocalWorker)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/AddBinkyNetObjectsGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelServiceServer is the server API for ModelService service.
type ModelServiceServer interface {
	// Try to parse an address
	ParseAddress(context.Context, *ParseAddressRequest) (*ParseAddressResult, error)
	// Try to parse a permission
	ParsePermission(context.Context, *ParsePermissionRequest) (*ParsePermissionResult, error)
	// Gets the current railway
	GetRailway(context.Context, *Empty) (*Railway, error)
	// Update the current railway
	UpdateRailway(context.Context, *Railway) (*Railway, error)
	// Save changes to disk
	Save(context.Context, *Empty) (*Empty, error)
	// Gets a module by ID.
	GetModule(context.Context, *IDRequest) (*Module, error)
	// Get the background image of a module by ID.
	GetModuleBackgroundImage(context.Context, *IDRequest) (*Image, error)
	// Update a module by ID.
	UpdateModule(context.Context, *Module) (*Module, error)
	// Adds a new module.
	AddModule(context.Context, *Empty) (*Module, error)
	// Delete the module with the given ID.
	DeleteModule(context.Context, *IDRequest) (*Empty, error)
	// Gets a loc by ID.
	GetLoc(context.Context, *IDRequest) (*Loc, error)
	// Update a loc by ID.
	UpdateLoc(context.Context, *Loc) (*Loc, error)
	// Update the image of a loc by ID.
	UpdateLocImage(context.Context, *ImageIDRequest) (*Loc, error)
	// Adds a new loc.
	AddLoc(context.Context, *Empty) (*Loc, error)
	// Delete the loc with the given ID.
	DeleteLoc(context.Context, *IDRequest) (*Empty, error)
	// Gets a loc group by ID.
	GetLocGroup(context.Context, *IDRequest) (*LocGroup, error)
	// Update a loc group by ID.
	UpdateLocGroup(context.Context, *LocGroup) (*LocGroup, error)
	// Adds a new loc group.
	AddLocGroup(context.Context, *Empty) (*LocGroup, error)
	// Delete the loc group with the given ID.
	DeleteLocGroup(context.Context, *IDRequest) (*Empty, error)
	// Gets a command station by ID.
	GetCommandStation(context.Context, *IDRequest) (*CommandStation, error)
	// Update a command station  by ID.
	UpdateCommandStation(context.Context, *CommandStation) (*CommandStation, error)
	// Gets a block by ID.
	GetBlock(context.Context, *IDRequest) (*Block, error)
	// Update a block by ID.
	UpdateBlock(context.Context, *Block) (*Block, error)
	// Adds a new block in the module identified by given by ID.
	AddBlock(context.Context, *IDRequest) (*Block, error)
	// Delete the block with the given ID.
	DeleteBlock(context.Context, *IDRequest) (*Module, error)
	// Gets a block group by ID.
	GetBlockGroup(context.Context, *IDRequest) (*BlockGroup, error)
	// Update a block group by ID.
	UpdateBlockGroup(context.Context, *BlockGroup) (*BlockGroup, error)
	// Adds a new block group in the module identified by given by ID.
	AddBlockGroup(context.Context, *IDRequest) (*BlockGroup, error)
	// Delete the block group with the given ID.
	DeleteBlockGroup(context.Context, *IDRequest) (*Module, error)
	// Gets an edge by ID.
	GetEdge(context.Context, *IDRequest) (*Edge, error)
	// Update an edge by ID.
	UpdateEdge(context.Context, *Edge) (*Edge, error)
	// Adds a new edge in the module identified by given by ID.
	AddEdge(context.Context, *IDRequest) (*Edge, error)
	// Delete the edge with the given ID.
	DeleteEdge(context.Context, *IDRequest) (*Module, error)
	// Gets a Junction by ID.
	GetJunction(context.Context, *IDRequest) (*Junction, error)
	// Update a Junction by ID.
	UpdateJunction(context.Context, *Junction) (*Junction, error)
	// Adds a new junction of type switch in the module identified by given by ID.
	AddSwitch(context.Context, *IDRequest) (*Junction, error)
	// Delete the junction with the given ID.
	DeleteJunction(context.Context, *IDRequest) (*Module, error)
	// Gets a Output by ID.
	GetOutput(context.Context, *IDRequest) (*Output, error)
	// Update a Output by ID.
	UpdateOutput(context.Context, *Output) (*Output, error)
	// Adds a new output of type binary output in the module identified by given
	// by ID.
	AddBinaryOutput(context.Context, *IDRequest) (*Output, error)
	// Delete the output with the given ID.
	DeleteOutput(context.Context, *IDRequest) (*Module, error)
	// Gets a Route by ID.
	GetRoute(context.Context, *IDRequest) (*Route, error)
	// Update a Route by ID.
	UpdateRoute(context.Context, *Route) (*Route, error)
	// Adds a new block in the module identified by given by ID.
	AddRoute(context.Context, *IDRequest) (*Route, error)
	// Delete the route with the given ID.
	DeleteRoute(context.Context, *IDRequest) (*Module, error)
	// Adds a crossing junction (of type switch) with given junction ID & switch direction.
	AddRouteCrossingJunctionSwitch(context.Context, *AddRouteCrossingJunctionSwitchRequest) (*Route, error)
	// Removes a crossing junction with given junction ID.
	RemoveRouteCrossingJunction(context.Context, *RemoveRouteCrossingJunctionRequest) (*Route, error)
	// Adds an output (of type binary output) with given output ID & active status.
	AddRouteBinaryOutput(context.Context, *AddRouteBinaryOutputRequest) (*Route, error)
	// Removes an output with given output ID.
	RemoveRouteOutput(context.Context, *RemoveRouteOutputRequest) (*Route, error)
	// Adds an event to the given route
	AddRouteEvent(context.Context, *AddRouteEventRequest) (*Route, error)
	// Remove an event from the given route
	RemoveRouteEvent(context.Context, *RemoveRouteEventRequest) (*Route, error)
	// Adds a behavior to an event in the given route
	AddRouteEventBehavior(context.Context, *AddRouteEventBehaviorRequest) (*Route, error)
	// Remove a behavior from an event in the given route
	RemoveRouteEventBehavior(context.Context, *RemoveRouteEventBehaviorRequest) (*Route, error)
	// Gets a Sensor by ID.
	GetSensor(context.Context, *IDRequest) (*Sensor, error)
	// Update a Sensor by ID.
	UpdateSensor(context.Context, *Sensor) (*Sensor, error)
	// Adds a new sensor of type binary sensor in the module identified by given
	// by ID.
	AddBinarySensor(context.Context, *IDRequest) (*Sensor, error)
	// Delete the sensor with the given ID.
	DeleteSensor(context.Context, *IDRequest) (*Module, error)
	// Gets a Signal by ID.
	GetSignal(context.Context, *IDRequest) (*Signal, error)
	// Update a Signal by ID.
	UpdateSignal(context.Context, *Signal) (*Signal, error)
	// Delete the signal with the given ID.
	DeleteSignal(context.Context, *IDRequest) (*Module, error)
	// Gets a BinkyNetLocalWorker by ID.
	GetBinkyNetLocalWorker(context.Context, *IDRequest) (*BinkyNetLocalWorker, error)
	// Update a BinkyNetLocalWorker by ID.
	UpdateBinkyNetLocalWorker(context.Context, *BinkyNetLocalWorker) (*BinkyNetLocalWorker, error)
	// Delete the BinkyNetLocalWorker with the given ID.
	DeleteBinkyNetLocalWorker(context.Context, *IDRequest) (*CommandStation, error)
	// Adds a new BinkyNetLocalWorker to the command station identified by given
	// by ID.
	AddBinkyNetLocalWorker(context.Context, *IDRequest) (*BinkyNetLocalWorker, error)
	// Adds a new BinkyNetDevice to the binkynet local worker identified by given
	// by ID.
	AddBinkyNetDevice(context.Context, *IDRequest) (*BinkyNetDevice, error)
	// Delete the BinkyNetDevice with the given SubID in local worker with given id.
	DeleteBinkyNetDevice(context.Context, *SubIDRequest) (*BinkyNetLocalWorker, error)
	// Adds a new BinkyNetObject to the binkynet local worker identified by given
	// by ID.
	AddBinkyNetObject(context.Context, *IDRequest) (*BinkyNetObject, error)
	// Delete the BinkyNetObject with the given SubID in local worker with given id.
	DeleteBinkyNetObject(context.Context, *SubIDRequest) (*BinkyNetLocalWorker, error)
	// Adds one or more new BinkyNetObject to the binkynet local worker identified by given
	// by ID and attach them to the given device.
	AddBinkyNetObjectsGroup(context.Context, *AddBinkyNetObjectsGroupRequest) (*BinkyNetLocalWorker, error)
}

// UnimplementedModelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedModelServiceServer struct {
}

func (*UnimplementedModelServiceServer) ParseAddress(ctx context.Context, req *ParseAddressRequest) (*ParseAddressResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseAddress not implemented")
}
func (*UnimplementedModelServiceServer) ParsePermission(ctx context.Context, req *ParsePermissionRequest) (*ParsePermissionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParsePermission not implemented")
}
func (*UnimplementedModelServiceServer) GetRailway(ctx context.Context, req *Empty) (*Railway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRailway not implemented")
}
func (*UnimplementedModelServiceServer) UpdateRailway(ctx context.Context, req *Railway) (*Railway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRailway not implemented")
}
func (*UnimplementedModelServiceServer) Save(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (*UnimplementedModelServiceServer) GetModule(ctx context.Context, req *IDRequest) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModule not implemented")
}
func (*UnimplementedModelServiceServer) GetModuleBackgroundImage(ctx context.Context, req *IDRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleBackgroundImage not implemented")
}
func (*UnimplementedModelServiceServer) UpdateModule(ctx context.Context, req *Module) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModule not implemented")
}
func (*UnimplementedModelServiceServer) AddModule(ctx context.Context, req *Empty) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddModule not implemented")
}
func (*UnimplementedModelServiceServer) DeleteModule(ctx context.Context, req *IDRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModule not implemented")
}
func (*UnimplementedModelServiceServer) GetLoc(ctx context.Context, req *IDRequest) (*Loc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoc not implemented")
}
func (*UnimplementedModelServiceServer) UpdateLoc(ctx context.Context, req *Loc) (*Loc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoc not implemented")
}
func (*UnimplementedModelServiceServer) UpdateLocImage(ctx context.Context, req *ImageIDRequest) (*Loc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocImage not implemented")
}
func (*UnimplementedModelServiceServer) AddLoc(ctx context.Context, req *Empty) (*Loc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLoc not implemented")
}
func (*UnimplementedModelServiceServer) DeleteLoc(ctx context.Context, req *IDRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoc not implemented")
}
func (*UnimplementedModelServiceServer) GetLocGroup(ctx context.Context, req *IDRequest) (*LocGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocGroup not implemented")
}
func (*UnimplementedModelServiceServer) UpdateLocGroup(ctx context.Context, req *LocGroup) (*LocGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocGroup not implemented")
}
func (*UnimplementedModelServiceServer) AddLocGroup(ctx context.Context, req *Empty) (*LocGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLocGroup not implemented")
}
func (*UnimplementedModelServiceServer) DeleteLocGroup(ctx context.Context, req *IDRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocGroup not implemented")
}
func (*UnimplementedModelServiceServer) GetCommandStation(ctx context.Context, req *IDRequest) (*CommandStation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommandStation not implemented")
}
func (*UnimplementedModelServiceServer) UpdateCommandStation(ctx context.Context, req *CommandStation) (*CommandStation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommandStation not implemented")
}
func (*UnimplementedModelServiceServer) GetBlock(ctx context.Context, req *IDRequest) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedModelServiceServer) UpdateBlock(ctx context.Context, req *Block) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlock not implemented")
}
func (*UnimplementedModelServiceServer) AddBlock(ctx context.Context, req *IDRequest) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlock not implemented")
}
func (*UnimplementedModelServiceServer) DeleteBlock(ctx context.Context, req *IDRequest) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlock not implemented")
}
func (*UnimplementedModelServiceServer) GetBlockGroup(ctx context.Context, req *IDRequest) (*BlockGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockGroup not implemented")
}
func (*UnimplementedModelServiceServer) UpdateBlockGroup(ctx context.Context, req *BlockGroup) (*BlockGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlockGroup not implemented")
}
func (*UnimplementedModelServiceServer) AddBlockGroup(ctx context.Context, req *IDRequest) (*BlockGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlockGroup not implemented")
}
func (*UnimplementedModelServiceServer) DeleteBlockGroup(ctx context.Context, req *IDRequest) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlockGroup not implemented")
}
func (*UnimplementedModelServiceServer) GetEdge(ctx context.Context, req *IDRequest) (*Edge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEdge not implemented")
}
func (*UnimplementedModelServiceServer) UpdateEdge(ctx context.Context, req *Edge) (*Edge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEdge not implemented")
}
func (*UnimplementedModelServiceServer) AddEdge(ctx context.Context, req *IDRequest) (*Edge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEdge not implemented")
}
func (*UnimplementedModelServiceServer) DeleteEdge(ctx context.Context, req *IDRequest) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEdge not implemented")
}
func (*UnimplementedModelServiceServer) GetJunction(ctx context.Context, req *IDRequest) (*Junction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJunction not implemented")
}
func (*UnimplementedModelServiceServer) UpdateJunction(ctx context.Context, req *Junction) (*Junction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJunction not implemented")
}
func (*UnimplementedModelServiceServer) AddSwitch(ctx context.Context, req *IDRequest) (*Junction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSwitch not implemented")
}
func (*UnimplementedModelServiceServer) DeleteJunction(ctx context.Context, req *IDRequest) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJunction not implemented")
}
func (*UnimplementedModelServiceServer) GetOutput(ctx context.Context, req *IDRequest) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutput not implemented")
}
func (*UnimplementedModelServiceServer) UpdateOutput(ctx context.Context, req *Output) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOutput not implemented")
}
func (*UnimplementedModelServiceServer) AddBinaryOutput(ctx context.Context, req *IDRequest) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBinaryOutput not implemented")
}
func (*UnimplementedModelServiceServer) DeleteOutput(ctx context.Context, req *IDRequest) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOutput not implemented")
}
func (*UnimplementedModelServiceServer) GetRoute(ctx context.Context, req *IDRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (*UnimplementedModelServiceServer) UpdateRoute(ctx context.Context, req *Route) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoute not implemented")
}
func (*UnimplementedModelServiceServer) AddRoute(ctx context.Context, req *IDRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoute not implemented")
}
func (*UnimplementedModelServiceServer) DeleteRoute(ctx context.Context, req *IDRequest) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (*UnimplementedModelServiceServer) AddRouteCrossingJunctionSwitch(ctx context.Context, req *AddRouteCrossingJunctionSwitchRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRouteCrossingJunctionSwitch not implemented")
}
func (*UnimplementedModelServiceServer) RemoveRouteCrossingJunction(ctx context.Context, req *RemoveRouteCrossingJunctionRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRouteCrossingJunction not implemented")
}
func (*UnimplementedModelServiceServer) AddRouteBinaryOutput(ctx context.Context, req *AddRouteBinaryOutputRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRouteBinaryOutput not implemented")
}
func (*UnimplementedModelServiceServer) RemoveRouteOutput(ctx context.Context, req *RemoveRouteOutputRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRouteOutput not implemented")
}
func (*UnimplementedModelServiceServer) AddRouteEvent(ctx context.Context, req *AddRouteEventRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRouteEvent not implemented")
}
func (*UnimplementedModelServiceServer) RemoveRouteEvent(ctx context.Context, req *RemoveRouteEventRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRouteEvent not implemented")
}
func (*UnimplementedModelServiceServer) AddRouteEventBehavior(ctx context.Context, req *AddRouteEventBehaviorRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRouteEventBehavior not implemented")
}
func (*UnimplementedModelServiceServer) RemoveRouteEventBehavior(ctx context.Context, req *RemoveRouteEventBehaviorRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRouteEventBehavior not implemented")
}
func (*UnimplementedModelServiceServer) GetSensor(ctx context.Context, req *IDRequest) (*Sensor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensor not implemented")
}
func (*UnimplementedModelServiceServer) UpdateSensor(ctx context.Context, req *Sensor) (*Sensor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSensor not implemented")
}
func (*UnimplementedModelServiceServer) AddBinarySensor(ctx context.Context, req *IDRequest) (*Sensor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBinarySensor not implemented")
}
func (*UnimplementedModelServiceServer) DeleteSensor(ctx context.Context, req *IDRequest) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSensor not implemented")
}
func (*UnimplementedModelServiceServer) GetSignal(ctx context.Context, req *IDRequest) (*Signal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignal not implemented")
}
func (*UnimplementedModelServiceServer) UpdateSignal(ctx context.Context, req *Signal) (*Signal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSignal not implemented")
}
func (*UnimplementedModelServiceServer) DeleteSignal(ctx context.Context, req *IDRequest) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSignal not implemented")
}
func (*UnimplementedModelServiceServer) GetBinkyNetLocalWorker(ctx context.Context, req *IDRequest) (*BinkyNetLocalWorker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBinkyNetLocalWorker not implemented")
}
func (*UnimplementedModelServiceServer) UpdateBinkyNetLocalWorker(ctx context.Context, req *BinkyNetLocalWorker) (*BinkyNetLocalWorker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBinkyNetLocalWorker not implemented")
}
func (*UnimplementedModelServiceServer) DeleteBinkyNetLocalWorker(ctx context.Context, req *IDRequest) (*CommandStation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinkyNetLocalWorker not implemented")
}
func (*UnimplementedModelServiceServer) AddBinkyNetLocalWorker(ctx context.Context, req *IDRequest) (*BinkyNetLocalWorker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBinkyNetLocalWorker not implemented")
}
func (*UnimplementedModelServiceServer) AddBinkyNetDevice(ctx context.Context, req *IDRequest) (*BinkyNetDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBinkyNetDevice not implemented")
}
func (*UnimplementedModelServiceServer) DeleteBinkyNetDevice(ctx context.Context, req *SubIDRequest) (*BinkyNetLocalWorker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinkyNetDevice not implemented")
}
func (*UnimplementedModelServiceServer) AddBinkyNetObject(ctx context.Context, req *IDRequest) (*BinkyNetObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBinkyNetObject not implemented")
}
func (*UnimplementedModelServiceServer) DeleteBinkyNetObject(ctx context.Context, req *SubIDRequest) (*BinkyNetLocalWorker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinkyNetObject not implemented")
}
func (*UnimplementedModelServiceServer) AddBinkyNetObjectsGroup(ctx context.Context, req *AddBinkyNetObjectsGroupRequest) (*BinkyNetLocalWorker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBinkyNetObjectsGroup not implemented")
}

func RegisterModelServiceServer(s *grpc.Server, srv ModelServiceServer) {
	s.RegisterService(&_ModelService_serviceDesc, srv)
}

func _ModelService_ParseAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).ParseAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/ParseAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).ParseAddress(ctx, req.(*ParseAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_ParsePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParsePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).ParsePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/ParsePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).ParsePermission(ctx, req.(*ParsePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetRailway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetRailway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetRailway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetRailway(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateRailway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Railway)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateRailway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateRailway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateRailway(ctx, req.(*Railway))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).Save(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModule(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModuleBackgroundImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModuleBackgroundImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetModuleBackgroundImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModuleBackgroundImage(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Module)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateModule(ctx, req.(*Module))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddModule(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/DeleteModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteModule(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetLoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetLoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetLoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetLoc(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateLoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Loc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateLoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateLoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateLoc(ctx, req.(*Loc))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateLocImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateLocImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateLocImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateLocImage(ctx, req.(*ImageIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddLoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddLoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddLoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddLoc(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteLoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteLoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/DeleteLoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteLoc(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetLocGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetLocGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetLocGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetLocGroup(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateLocGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateLocGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateLocGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateLocGroup(ctx, req.(*LocGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddLocGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddLocGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddLocGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddLocGroup(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteLocGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteLocGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/DeleteLocGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteLocGroup(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetCommandStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetCommandStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetCommandStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetCommandStation(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateCommandStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandStation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateCommandStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateCommandStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateCommandStation(ctx, req.(*CommandStation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetBlock(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateBlock(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddBlock(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/DeleteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteBlock(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetBlockGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetBlockGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetBlockGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetBlockGroup(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateBlockGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateBlockGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateBlockGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateBlockGroup(ctx, req.(*BlockGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddBlockGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddBlockGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddBlockGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddBlockGroup(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteBlockGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteBlockGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/DeleteBlockGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteBlockGroup(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetEdge(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateEdge(ctx, req.(*Edge))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddEdge(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/DeleteEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteEdge(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetJunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetJunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetJunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetJunction(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateJunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Junction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateJunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateJunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateJunction(ctx, req.(*Junction))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddSwitch(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteJunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteJunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/DeleteJunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteJunction(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetOutput(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Output)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateOutput(ctx, req.(*Output))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddBinaryOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddBinaryOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddBinaryOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddBinaryOutput(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/DeleteOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteOutput(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetRoute(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Route)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateRoute(ctx, req.(*Route))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddRoute(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/DeleteRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteRoute(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddRouteCrossingJunctionSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouteCrossingJunctionSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddRouteCrossingJunctionSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddRouteCrossingJunctionSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddRouteCrossingJunctionSwitch(ctx, req.(*AddRouteCrossingJunctionSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_RemoveRouteCrossingJunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRouteCrossingJunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).RemoveRouteCrossingJunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/RemoveRouteCrossingJunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).RemoveRouteCrossingJunction(ctx, req.(*RemoveRouteCrossingJunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddRouteBinaryOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouteBinaryOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddRouteBinaryOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddRouteBinaryOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddRouteBinaryOutput(ctx, req.(*AddRouteBinaryOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_RemoveRouteOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRouteOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).RemoveRouteOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/RemoveRouteOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).RemoveRouteOutput(ctx, req.(*RemoveRouteOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddRouteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddRouteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddRouteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddRouteEvent(ctx, req.(*AddRouteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_RemoveRouteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRouteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).RemoveRouteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/RemoveRouteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).RemoveRouteEvent(ctx, req.(*RemoveRouteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddRouteEventBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouteEventBehaviorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddRouteEventBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddRouteEventBehavior",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddRouteEventBehavior(ctx, req.(*AddRouteEventBehaviorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_RemoveRouteEventBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRouteEventBehaviorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).RemoveRouteEventBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/RemoveRouteEventBehavior",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).RemoveRouteEventBehavior(ctx, req.(*RemoveRouteEventBehaviorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetSensor(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sensor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateSensor(ctx, req.(*Sensor))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddBinarySensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddBinarySensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddBinarySensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddBinarySensor(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/DeleteSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteSensor(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetSignal(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Signal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateSignal(ctx, req.(*Signal))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/DeleteSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteSignal(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetBinkyNetLocalWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetBinkyNetLocalWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetBinkyNetLocalWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetBinkyNetLocalWorker(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateBinkyNetLocalWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinkyNetLocalWorker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateBinkyNetLocalWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateBinkyNetLocalWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateBinkyNetLocalWorker(ctx, req.(*BinkyNetLocalWorker))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteBinkyNetLocalWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteBinkyNetLocalWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/DeleteBinkyNetLocalWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteBinkyNetLocalWorker(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddBinkyNetLocalWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddBinkyNetLocalWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddBinkyNetLocalWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddBinkyNetLocalWorker(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddBinkyNetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddBinkyNetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddBinkyNetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddBinkyNetDevice(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteBinkyNetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteBinkyNetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/DeleteBinkyNetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteBinkyNetDevice(ctx, req.(*SubIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddBinkyNetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddBinkyNetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddBinkyNetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddBinkyNetObject(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteBinkyNetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteBinkyNetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/DeleteBinkyNetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteBinkyNetObject(ctx, req.(*SubIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AddBinkyNetObjectsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBinkyNetObjectsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).AddBinkyNetObjectsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/AddBinkyNetObjectsGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).AddBinkyNetObjectsGroup(ctx, req.(*AddBinkyNetObjectsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "binkyrailways.v1.ModelService",
	HandlerType: (*ModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseAddress",
			Handler:    _ModelService_ParseAddress_Handler,
		},
		{
			MethodName: "ParsePermission",
			Handler:    _ModelService_ParsePermission_Handler,
		},
		{
			MethodName: "GetRailway",
			Handler:    _ModelService_GetRailway_Handler,
		},
		{
			MethodName: "UpdateRailway",
			Handler:    _ModelService_UpdateRailway_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _ModelService_Save_Handler,
		},
		{
			MethodName: "GetModule",
			Handler:    _ModelService_GetModule_Handler,
		},
		{
			MethodName: "GetModuleBackgroundImage",
			Handler:    _ModelService_GetModuleBackgroundImage_Handler,
		},
		{
			MethodName: "UpdateModule",
			Handler:    _ModelService_UpdateModule_Handler,
		},
		{
			MethodName: "AddModule",
			Handler:    _ModelService_AddModule_Handler,
		},
		{
			MethodName: "DeleteModule",
			Handler:    _ModelService_DeleteModule_Handler,
		},
		{
			MethodName: "GetLoc",
			Handler:    _ModelService_GetLoc_Handler,
		},
		{
			MethodName: "UpdateLoc",
			Handler:    _ModelService_UpdateLoc_Handler,
		},
		{
			MethodName: "UpdateLocImage",
			Handler:    _ModelService_UpdateLocImage_Handler,
		},
		{
			MethodName: "AddLoc",
			Handler:    _ModelService_AddLoc_Handler,
		},
		{
			MethodName: "DeleteLoc",
			Handler:    _ModelService_DeleteLoc_Handler,
		},
		{
			MethodName: "GetLocGroup",
			Handler:    _ModelService_GetLocGroup_Handler,
		},
		{
			MethodName: "UpdateLocGroup",
			Handler:    _ModelService_UpdateLocGroup_Handler,
		},
		{
			MethodName: "AddLocGroup",
			Handler:    _ModelService_AddLocGroup_Handler,
		},
		{
			MethodName: "DeleteLocGroup",
			Handler:    _ModelService_DeleteLocGroup_Handler,
		},
		{
			MethodName: "GetCommandStation",
			Handler:    _ModelService_GetCommandStation_Handler,
		},
		{
			MethodName: "UpdateCommandStation",
			Handler:    _ModelService_UpdateCommandStation_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _ModelService_GetBlock_Handler,
		},
		{
			MethodName: "UpdateBlock",
			Handler:    _ModelService_UpdateBlock_Handler,
		},
		{
			MethodName: "AddBlock",
			Handler:    _ModelService_AddBlock_Handler,
		},
		{
			MethodName: "DeleteBlock",
			Handler:    _ModelService_DeleteBlock_Handler,
		},
		{
			MethodName: "GetBlockGroup",
			Handler:    _ModelService_GetBlockGroup_Handler,
		},
		{
			MethodName: "UpdateBlockGroup",
			Handler:    _ModelService_UpdateBlockGroup_Handler,
		},
		{
			MethodName: "AddBlockGroup",
			Handler:    _ModelService_AddBlockGroup_Handler,
		},
		{
			MethodName: "DeleteBlockGroup",
			Handler:    _ModelService_DeleteBlockGroup_Handler,
		},
		{
			MethodName: "GetEdge",
			Handler:    _ModelService_GetEdge_Handler,
		},
		{
			MethodName: "UpdateEdge",
			Handler:    _ModelService_UpdateEdge_Handler,
		},
		{
			MethodName: "AddEdge",
			Handler:    _ModelService_AddEdge_Handler,
		},
		{
			MethodName: "DeleteEdge",
			Handler:    _ModelService_DeleteEdge_Handler,
		},
		{
			MethodName: "GetJunction",
			Handler:    _ModelService_GetJunction_Handler,
		},
		{
			MethodName: "UpdateJunction",
			Handler:    _ModelService_UpdateJunction_Handler,
		},
		{
			MethodName: "AddSwitch",
			Handler:    _ModelService_AddSwitch_Handler,
		},
		{
			MethodName: "DeleteJunction",
			Handler:    _ModelService_DeleteJunction_Handler,
		},
		{
			MethodName: "GetOutput",
			Handler:    _ModelService_GetOutput_Handler,
		},
		{
			MethodName: "UpdateOutput",
			Handler:    _ModelService_UpdateOutput_Handler,
		},
		{
			MethodName: "AddBinaryOutput",
			Handler:    _ModelService_AddBinaryOutput_Handler,
		},
		{
			MethodName: "DeleteOutput",
			Handler:    _ModelService_DeleteOutput_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _ModelService_GetRoute_Handler,
		},
		{
			MethodName: "UpdateRoute",
			Handler:    _ModelService_UpdateRoute_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _ModelService_AddRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _ModelService_DeleteRoute_Handler,
		},
		{
			MethodName: "AddRouteCrossingJunctionSwitch",
			Handler:    _ModelService_AddRouteCrossingJunctionSwitch_Handler,
		},
		{
			MethodName: "RemoveRouteCrossingJunction",
			Handler:    _ModelService_RemoveRouteCrossingJunction_Handler,
		},
		{
			MethodName: "AddRouteBinaryOutput",
			Handler:    _ModelService_AddRouteBinaryOutput_Handler,
		},
		{
			MethodName: "RemoveRouteOutput",
			Handler:    _ModelService_RemoveRouteOutput_Handler,
		},
		{
			MethodName: "AddRouteEvent",
			Handler:    _ModelService_AddRouteEvent_Handler,
		},
		{
			MethodName: "RemoveRouteEvent",
			Handler:    _ModelService_RemoveRouteEvent_Handler,
		},
		{
			MethodName: "AddRouteEventBehavior",
			Handler:    _ModelService_AddRouteEventBehavior_Handler,
		},
		{
			MethodName: "RemoveRouteEventBehavior",
			Handler:    _ModelService_RemoveRouteEventBehavior_Handler,
		},
		{
			MethodName: "GetSensor",
			Handler:    _ModelService_GetSensor_Handler,
		},
		{
			MethodName: "UpdateSensor",
			Handler:    _ModelService_UpdateSensor_Handler,
		},
		{
			MethodName: "AddBinarySensor",
			Handler:    _ModelService_AddBinarySensor_Handler,
		},
		{
			MethodName: "DeleteSensor",
			Handler:    _ModelService_DeleteSensor_Handler,
		},
		{
			MethodName: "GetSignal",
			Handler:    _ModelService_GetSignal_Handler,
		},
		{
			MethodName: "UpdateSignal",
			Handler:    _ModelService_UpdateSignal_Handler,
		},
		{
			MethodName: "DeleteSignal",
			Handler:    _ModelService_DeleteSignal_Handler,
		},
		{
			MethodName: "GetBinkyNetLocalWorker",
			Handler:    _ModelService_GetBinkyNetLocalWorker_Handler,
		},
		{
			MethodName: "UpdateBinkyNetLocalWorker",
			Handler:    _ModelService_UpdateBinkyNetLocalWorker_Handler,
		},
		{
			MethodName: "DeleteBinkyNetLocalWorker",
			Handler:    _ModelService_DeleteBinkyNetLocalWorker_Handler,
		},
		{
			MethodName: "AddBinkyNetLocalWorker",
			Handler:    _ModelService_AddBinkyNetLocalWorker_Handler,
		},
		{
			MethodName: "AddBinkyNetDevice",
			Handler:    _ModelService_AddBinkyNetDevice_Handler,
		},
		{
			MethodName: "DeleteBinkyNetDevice",
			Handler:    _ModelService_DeleteBinkyNetDevice_Handler,
		},
		{
			MethodName: "AddBinkyNetObject",
			Handler:    _ModelService_AddBinkyNetObject_Handler,
		},
		{
			MethodName: "DeleteBinkyNetObject",
			Handler:    _ModelService_DeleteBinkyNetObject_Handler,
		},
		{
			MethodName: "AddBinkyNetObjectsGroup",
			Handler:    _ModelService_AddBinkyNetObjectsGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "br_model_service.proto",
}

func (m *IDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubId) > 0 {
		i -= len(m.SubId)
		copy(dAtA[i:], m.SubId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.SubId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParseAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParseAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParseAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParseAddressResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParseAddressResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParseAddressResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FormattedValue) > 0 {
		i -= len(m.FormattedValue)
		copy(dAtA[i:], m.FormattedValue)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.FormattedValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ParsePermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParsePermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParsePermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParsePermissionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParsePermissionResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParsePermissionResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FormattedValue) > 0 {
		i -= len(m.FormattedValue)
		copy(dAtA[i:], m.FormattedValue)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.FormattedValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddRouteCrossingJunctionSwitchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRouteCrossingJunctionSwitchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRouteCrossingJunctionSwitchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Direction != 0 {
		i = encodeVarintBrModelService(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x18
	}
	if len(m.JunctionId) > 0 {
		i -= len(m.JunctionId)
		copy(dAtA[i:], m.JunctionId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.JunctionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RouteId) > 0 {
		i -= len(m.RouteId)
		copy(dAtA[i:], m.RouteId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.RouteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveRouteCrossingJunctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveRouteCrossingJunctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveRouteCrossingJunctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JunctionId) > 0 {
		i -= len(m.JunctionId)
		copy(dAtA[i:], m.JunctionId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.JunctionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RouteId) > 0 {
		i -= len(m.RouteId)
		copy(dAtA[i:], m.RouteId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.RouteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddRouteBinaryOutputRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRouteBinaryOutputRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRouteBinaryOutputRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.OutputId) > 0 {
		i -= len(m.OutputId)
		copy(dAtA[i:], m.OutputId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.OutputId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RouteId) > 0 {
		i -= len(m.RouteId)
		copy(dAtA[i:], m.RouteId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.RouteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveRouteOutputRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveRouteOutputRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveRouteOutputRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OutputId) > 0 {
		i -= len(m.OutputId)
		copy(dAtA[i:], m.OutputId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.OutputId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RouteId) > 0 {
		i -= len(m.RouteId)
		copy(dAtA[i:], m.RouteId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.RouteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddRouteEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRouteEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRouteEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SensorId) > 0 {
		i -= len(m.SensorId)
		copy(dAtA[i:], m.SensorId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.SensorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RouteId) > 0 {
		i -= len(m.RouteId)
		copy(dAtA[i:], m.RouteId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.RouteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveRouteEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveRouteEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveRouteEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SensorId) > 0 {
		i -= len(m.SensorId)
		copy(dAtA[i:], m.SensorId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.SensorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RouteId) > 0 {
		i -= len(m.RouteId)
		copy(dAtA[i:], m.RouteId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.RouteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddRouteEventBehaviorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRouteEventBehaviorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRouteEventBehaviorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SensorId) > 0 {
		i -= len(m.SensorId)
		copy(dAtA[i:], m.SensorId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.SensorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RouteId) > 0 {
		i -= len(m.RouteId)
		copy(dAtA[i:], m.RouteId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.RouteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveRouteEventBehaviorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveRouteEventBehaviorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveRouteEventBehaviorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Index != 0 {
		i = encodeVarintBrModelService(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SensorId) > 0 {
		i -= len(m.SensorId)
		copy(dAtA[i:], m.SensorId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.SensorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RouteId) > 0 {
		i -= len(m.RouteId)
		copy(dAtA[i:], m.RouteId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.RouteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddBinkyNetObjectsGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddBinkyNetObjectsGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddBinkyNetObjectsGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintBrModelService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LocalWorkerId) > 0 {
		i -= len(m.LocalWorkerId)
		copy(dAtA[i:], m.LocalWorkerId)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.LocalWorkerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBrModelService(dAtA []byte, offset int, v uint64) int {
	offset -= sovBrModelService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	l = len(m.SubId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImageIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParseAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParseAddressResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	l = len(m.FormattedValue)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParsePermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParsePermissionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	l = len(m.FormattedValue)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddRouteCrossingJunctionSwitchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RouteId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	l = len(m.JunctionId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.Direction != 0 {
		n += 1 + sovBrModelService(uint64(m.Direction))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveRouteCrossingJunctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RouteId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	l = len(m.JunctionId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddRouteBinaryOutputRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RouteId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	l = len(m.OutputId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.Active {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveRouteOutputRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RouteId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	l = len(m.OutputId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddRouteEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RouteId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	l = len(m.SensorId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveRouteEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RouteId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	l = len(m.SensorId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddRouteEventBehaviorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RouteId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	l = len(m.SensorId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveRouteEventBehaviorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RouteId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	l = len(m.SensorId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovBrModelService(uint64(m.Index))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddBinkyNetObjectsGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocalWorkerId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovBrModelService(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBrModelService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBrModelService(x uint64) (n int) {
	return sovBrModelService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = append(m.Image[:0], dAtA[iNdEx:postIndex]...)
			if m.Image == nil {
				m.Image = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParseAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParseAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParseAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParseAddressResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParseAddressResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParseAddressResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormattedValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FormattedValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParsePermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParsePermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParsePermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParsePermissionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParsePermissionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParsePermissionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormattedValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FormattedValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRouteCrossingJunctionSwitchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRouteCrossingJunctionSwitchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRouteCrossingJunctionSwitchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JunctionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JunctionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= SwitchDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveRouteCrossingJunctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveRouteCrossingJunctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveRouteCrossingJunctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JunctionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JunctionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRouteBinaryOutputRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRouteBinaryOutputRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRouteBinaryOutputRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveRouteOutputRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveRouteOutputRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveRouteOutputRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRouteEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRouteEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRouteEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SensorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveRouteEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveRouteEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveRouteEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SensorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRouteEventBehaviorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRouteEventBehaviorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRouteEventBehaviorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SensorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveRouteEventBehaviorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveRouteEventBehaviorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveRouteEventBehaviorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SensorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddBinkyNetObjectsGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddBinkyNetObjectsGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddBinkyNetObjectsGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalWorkerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalWorkerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= BinkyNetObjectsGroupType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBrModelService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBrModelService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBrModelService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBrModelService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBrModelService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBrModelService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBrModelService = fmt.Errorf("proto: unexpected end of group")
)
