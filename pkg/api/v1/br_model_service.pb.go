// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: br_model_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request by ID
type IDRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDRequest) Reset()         { *m = IDRequest{} }
func (m *IDRequest) String() string { return proto.CompactTextString(m) }
func (*IDRequest) ProtoMessage()    {}
func (*IDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{0}
}
func (m *IDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDRequest.Merge(m, src)
}
func (m *IDRequest) XXX_Size() int {
	return m.Size()
}
func (m *IDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IDRequest proto.InternalMessageInfo

func (m *IDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ParseAddressRequest struct {
	// Address to parse
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseAddressRequest) Reset()         { *m = ParseAddressRequest{} }
func (m *ParseAddressRequest) String() string { return proto.CompactTextString(m) }
func (*ParseAddressRequest) ProtoMessage()    {}
func (*ParseAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{1}
}
func (m *ParseAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParseAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParseAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParseAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseAddressRequest.Merge(m, src)
}
func (m *ParseAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *ParseAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParseAddressRequest proto.InternalMessageInfo

func (m *ParseAddressRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ParseAddressResult struct {
	// Was the input a valid address?
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// Error message in case of non-valid input
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Formatted address in case of valid input
	FormattedValue       string   `protobuf:"bytes,3,opt,name=formatted_value,json=formattedValue,proto3" json:"formatted_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseAddressResult) Reset()         { *m = ParseAddressResult{} }
func (m *ParseAddressResult) String() string { return proto.CompactTextString(m) }
func (*ParseAddressResult) ProtoMessage()    {}
func (*ParseAddressResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5e66fb0029ff04, []int{2}
}
func (m *ParseAddressResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParseAddressResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParseAddressResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParseAddressResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseAddressResult.Merge(m, src)
}
func (m *ParseAddressResult) XXX_Size() int {
	return m.Size()
}
func (m *ParseAddressResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseAddressResult.DiscardUnknown(m)
}

var xxx_messageInfo_ParseAddressResult proto.InternalMessageInfo

func (m *ParseAddressResult) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *ParseAddressResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ParseAddressResult) GetFormattedValue() string {
	if m != nil {
		return m.FormattedValue
	}
	return ""
}

func init() {
	proto.RegisterType((*IDRequest)(nil), "binkyrailways.v1.IDRequest")
	proto.RegisterType((*ParseAddressRequest)(nil), "binkyrailways.v1.ParseAddressRequest")
	proto.RegisterType((*ParseAddressResult)(nil), "binkyrailways.v1.ParseAddressResult")
}

func init() { proto.RegisterFile("br_model_service.proto", fileDescriptor_0d5e66fb0029ff04) }

var fileDescriptor_0d5e66fb0029ff04 = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0xa5, 0x05, 0xc6, 0x7a, 0x57, 0x0a, 0x98, 0x02, 0xa5, 0x93, 0xaa, 0xa9, 0x02, 0x81, 0x84,
	0xd4, 0xaa, 0xf0, 0x02, 0x12, 0x12, 0x23, 0x63, 0x84, 0x21, 0x26, 0xa6, 0x54, 0xf0, 0x30, 0x1e,
	0x2a, 0x37, 0xbe, 0x94, 0xa8, 0x49, 0x1d, 0x62, 0xbb, 0xa8, 0x7f, 0xc2, 0x27, 0xf1, 0xc8, 0x27,
	0x4c, 0xe5, 0x47, 0x50, 0xea, 0x24, 0x62, 0x4d, 0xe2, 0xb2, 0xc7, 0x73, 0xef, 0x39, 0xe7, 0x1e,
	0x5f, 0xc7, 0x0a, 0xdc, 0x1d, 0x47, 0xa3, 0x80, 0x33, 0xf4, 0x47, 0x02, 0xa3, 0xb9, 0xe7, 0x62,
	0x2f, 0x8c, 0xb8, 0xe4, 0xe4, 0xe6, 0xd8, 0x9b, 0x4d, 0x17, 0x11, 0xf5, 0xfc, 0x1f, 0x74, 0x21,
	0x7a, 0xf3, 0x41, 0xbb, 0x99, 0x31, 0xe5, 0x22, 0x44, 0xa1, 0x79, 0xdd, 0x5d, 0xa8, 0x1d, 0xbd,
	0x71, 0xf0, 0xbb, 0x42, 0x21, 0x49, 0x03, 0xaa, 0x1e, 0x6b, 0x55, 0xf6, 0x2a, 0x8f, 0x6b, 0x4e,
	0xd5, 0x63, 0xdd, 0x27, 0x70, 0xfb, 0x84, 0x46, 0x02, 0x5f, 0x33, 0x16, 0xa1, 0x10, 0x29, 0xad,
	0x09, 0x57, 0xe7, 0xd4, 0x57, 0x98, 0x30, 0x35, 0xe8, 0x06, 0x40, 0xce, 0x93, 0x85, 0xf2, 0x53,
	0x6e, 0xe2, 0xba, 0xed, 0x68, 0x40, 0x5a, 0x70, 0x2d, 0x40, 0x21, 0xe8, 0x04, 0x5b, 0xd5, 0x95,
	0x47, 0x0a, 0xc9, 0x23, 0xb8, 0xf1, 0x95, 0x47, 0x01, 0x95, 0x12, 0xd9, 0x48, 0x4f, 0xb9, 0xbc,
	0x62, 0x34, 0xb2, 0xf2, 0xe7, 0xb8, 0xfa, 0xf4, 0x0c, 0xa0, 0x7e, 0x1c, 0x1f, 0x67, 0xa8, 0xcf,
	0x4d, 0xbe, 0x40, 0xfd, 0xdf, 0xf9, 0xe4, 0x61, 0x6f, 0x7d, 0x05, 0xbd, 0x82, 0xc3, 0xb4, 0x1f,
	0x6c, 0xa2, 0xad, 0x8e, 0xb1, 0x0f, 0x60, 0xa3, 0x74, 0x34, 0x89, 0xdc, 0xcb, 0x6b, 0x0e, 0x83,
	0x50, 0x2e, 0xda, 0xf7, 0xf3, 0x8d, 0x54, 0x73, 0x08, 0xd7, 0x3f, 0x85, 0x8c, 0x4a, 0x4c, 0x0b,
	0xe5, 0x5c, 0x93, 0xcd, 0x73, 0xb8, 0x32, 0xa4, 0x73, 0x2c, 0x8f, 0x50, 0xd6, 0x20, 0x16, 0xd4,
	0x6c, 0x94, 0xc7, 0x9c, 0x29, 0x1f, 0xc9, 0x6e, 0x9e, 0x95, 0x7d, 0x06, 0xed, 0x56, 0xbe, 0x99,
	0xc8, 0x4e, 0xa0, 0x95, 0x79, 0x58, 0xd4, 0x9d, 0x4e, 0x22, 0xae, 0x66, 0xec, 0x28, 0x88, 0x6f,
	0xce, 0x68, 0x59, 0x90, 0x4a, 0xab, 0x2c, 0xa8, 0xeb, 0xb5, 0x24, 0x13, 0x4a, 0x67, 0x1b, 0x52,
	0xbd, 0x84, 0x2d, 0x1b, 0xe5, 0x07, 0xee, 0x9a, 0x33, 0xdc, 0xc9, 0x37, 0x63, 0xcd, 0x0b, 0xa8,
	0xe9, 0x04, 0x31, 0x28, 0xe6, 0x94, 0x49, 0xdf, 0xc2, 0x8e, 0x1e, 0x6c, 0x47, 0x5c, 0x85, 0xe6,
	0xe9, 0xed, 0x42, 0x0b, 0x2d, 0x7c, 0x07, 0x8d, 0x2c, 0x82, 0xae, 0x18, 0xd8, 0x46, 0x27, 0x07,
	0x6e, 0xd9, 0x28, 0x0f, 0x78, 0x10, 0xd0, 0x19, 0x1b, 0x4a, 0x2a, 0x3d, 0x3e, 0x33, 0xe7, 0xda,
	0xcb, 0x37, 0xd7, 0xe4, 0xa7, 0xd0, 0xd4, 0xe9, 0xd6, 0xea, 0x1b, 0x95, 0xff, 0xe1, 0xbd, 0x0f,
	0xdb, 0x36, 0x4a, 0xcb, 0xe7, 0xee, 0xf4, 0xc2, 0x1f, 0x90, 0x56, 0xbd, 0x82, 0x1d, 0x9d, 0x4e,
	0xc3, 0x32, 0x5e, 0xb9, 0x81, 0xbe, 0xc4, 0xf7, 0x6a, 0xe6, 0x6e, 0x5e, 0x56, 0xc1, 0xea, 0x33,
	0x61, 0x76, 0x89, 0x59, 0xc5, 0xc0, 0x36, 0x3a, 0xe9, 0x97, 0xfa, 0x51, 0xc9, 0x50, 0xc9, 0x0b,
	0xbf, 0xd4, 0x44, 0x96, 0xbd, 0xab, 0x04, 0x97, 0x32, 0xcb, 0x3d, 0xac, 0x83, 0x5f, 0xcb, 0x4e,
	0xe5, 0xf7, 0xb2, 0x53, 0x39, 0x5b, 0x76, 0x2a, 0x3f, 0xff, 0x74, 0x2e, 0x9d, 0x0e, 0x26, 0x9e,
	0xfc, 0xa6, 0xc6, 0x3d, 0x97, 0x07, 0xfd, 0x73, 0xaa, 0xbe, 0x15, 0x23, 0x27, 0x45, 0xe1, 0x74,
	0xd2, 0xa7, 0xa1, 0xd7, 0x9f, 0x0f, 0xc6, 0x5b, 0xab, 0xff, 0xcc, 0xb3, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x25, 0x42, 0x5b, 0xf4, 0xa9, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ModelServiceClient is the client API for ModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ModelServiceClient interface {
	// Try to parse an address
	ParseAddress(ctx context.Context, in *ParseAddressRequest, opts ...grpc.CallOption) (*ParseAddressResult, error)
	// Gets the current railway
	GetRailway(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Railway, error)
	// Update the current railway
	UpdateRailway(ctx context.Context, in *Railway, opts ...grpc.CallOption) (*Railway, error)
	// Save changes to disk
	Save(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Gets a module by ID.
	GetModule(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error)
	// Get the background image of a module by ID.
	GetModuleBackgroundImage(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Image, error)
	// Update a module by ID.
	UpdateModule(ctx context.Context, in *Module, opts ...grpc.CallOption) (*Module, error)
	// Gets a loc by ID.
	GetLoc(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Loc, error)
	// Update a loc by ID.
	UpdateLoc(ctx context.Context, in *Loc, opts ...grpc.CallOption) (*Loc, error)
	// Gets a loc group by ID.
	GetLocGroup(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*LocGroup, error)
	// Update a loc group by ID.
	UpdateLocGroup(ctx context.Context, in *LocGroup, opts ...grpc.CallOption) (*LocGroup, error)
	// Gets a command station by ID.
	GetCommandStation(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*CommandStation, error)
	// Update a command station  by ID.
	UpdateCommandStation(ctx context.Context, in *CommandStation, opts ...grpc.CallOption) (*CommandStation, error)
	// Gets a block by ID.
	GetBlock(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Block, error)
	// Update a block by ID.
	UpdateBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Block, error)
	// Gets a Junction by ID.
	GetJunction(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Junction, error)
	// Update a Junction by ID.
	UpdateJunction(ctx context.Context, in *Junction, opts ...grpc.CallOption) (*Junction, error)
	// Gets a Output by ID.
	GetOutput(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Output, error)
	// Update a Output by ID.
	UpdateOutput(ctx context.Context, in *Output, opts ...grpc.CallOption) (*Output, error)
}

type modelServiceClient struct {
	cc *grpc.ClientConn
}

func NewModelServiceClient(cc *grpc.ClientConn) ModelServiceClient {
	return &modelServiceClient{cc}
}

func (c *modelServiceClient) ParseAddress(ctx context.Context, in *ParseAddressRequest, opts ...grpc.CallOption) (*ParseAddressResult, error) {
	out := new(ParseAddressResult)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/ParseAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetRailway(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Railway, error) {
	out := new(Railway)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetRailway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateRailway(ctx context.Context, in *Railway, opts ...grpc.CallOption) (*Railway, error) {
	out := new(Railway)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateRailway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) Save(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModule(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModuleBackgroundImage(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetModuleBackgroundImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateModule(ctx context.Context, in *Module, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetLoc(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Loc, error) {
	out := new(Loc)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetLoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateLoc(ctx context.Context, in *Loc, opts ...grpc.CallOption) (*Loc, error) {
	out := new(Loc)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateLoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetLocGroup(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*LocGroup, error) {
	out := new(LocGroup)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetLocGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateLocGroup(ctx context.Context, in *LocGroup, opts ...grpc.CallOption) (*LocGroup, error) {
	out := new(LocGroup)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateLocGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetCommandStation(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*CommandStation, error) {
	out := new(CommandStation)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetCommandStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateCommandStation(ctx context.Context, in *CommandStation, opts ...grpc.CallOption) (*CommandStation, error) {
	out := new(CommandStation)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateCommandStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetBlock(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetJunction(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Junction, error) {
	out := new(Junction)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetJunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateJunction(ctx context.Context, in *Junction, opts ...grpc.CallOption) (*Junction, error) {
	out := new(Junction)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateJunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetOutput(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/GetOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateOutput(ctx context.Context, in *Output, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/binkyrailways.v1.ModelService/UpdateOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelServiceServer is the server API for ModelService service.
type ModelServiceServer interface {
	// Try to parse an address
	ParseAddress(context.Context, *ParseAddressRequest) (*ParseAddressResult, error)
	// Gets the current railway
	GetRailway(context.Context, *Empty) (*Railway, error)
	// Update the current railway
	UpdateRailway(context.Context, *Railway) (*Railway, error)
	// Save changes to disk
	Save(context.Context, *Empty) (*Empty, error)
	// Gets a module by ID.
	GetModule(context.Context, *IDRequest) (*Module, error)
	// Get the background image of a module by ID.
	GetModuleBackgroundImage(context.Context, *IDRequest) (*Image, error)
	// Update a module by ID.
	UpdateModule(context.Context, *Module) (*Module, error)
	// Gets a loc by ID.
	GetLoc(context.Context, *IDRequest) (*Loc, error)
	// Update a loc by ID.
	UpdateLoc(context.Context, *Loc) (*Loc, error)
	// Gets a loc group by ID.
	GetLocGroup(context.Context, *IDRequest) (*LocGroup, error)
	// Update a loc group by ID.
	UpdateLocGroup(context.Context, *LocGroup) (*LocGroup, error)
	// Gets a command station by ID.
	GetCommandStation(context.Context, *IDRequest) (*CommandStation, error)
	// Update a command station  by ID.
	UpdateCommandStation(context.Context, *CommandStation) (*CommandStation, error)
	// Gets a block by ID.
	GetBlock(context.Context, *IDRequest) (*Block, error)
	// Update a block by ID.
	UpdateBlock(context.Context, *Block) (*Block, error)
	// Gets a Junction by ID.
	GetJunction(context.Context, *IDRequest) (*Junction, error)
	// Update a Junction by ID.
	UpdateJunction(context.Context, *Junction) (*Junction, error)
	// Gets a Output by ID.
	GetOutput(context.Context, *IDRequest) (*Output, error)
	// Update a Output by ID.
	UpdateOutput(context.Context, *Output) (*Output, error)
}

// UnimplementedModelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedModelServiceServer struct {
}

func (*UnimplementedModelServiceServer) ParseAddress(ctx context.Context, req *ParseAddressRequest) (*ParseAddressResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseAddress not implemented")
}
func (*UnimplementedModelServiceServer) GetRailway(ctx context.Context, req *Empty) (*Railway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRailway not implemented")
}
func (*UnimplementedModelServiceServer) UpdateRailway(ctx context.Context, req *Railway) (*Railway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRailway not implemented")
}
func (*UnimplementedModelServiceServer) Save(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (*UnimplementedModelServiceServer) GetModule(ctx context.Context, req *IDRequest) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModule not implemented")
}
func (*UnimplementedModelServiceServer) GetModuleBackgroundImage(ctx context.Context, req *IDRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleBackgroundImage not implemented")
}
func (*UnimplementedModelServiceServer) UpdateModule(ctx context.Context, req *Module) (*Module, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModule not implemented")
}
func (*UnimplementedModelServiceServer) GetLoc(ctx context.Context, req *IDRequest) (*Loc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoc not implemented")
}
func (*UnimplementedModelServiceServer) UpdateLoc(ctx context.Context, req *Loc) (*Loc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoc not implemented")
}
func (*UnimplementedModelServiceServer) GetLocGroup(ctx context.Context, req *IDRequest) (*LocGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocGroup not implemented")
}
func (*UnimplementedModelServiceServer) UpdateLocGroup(ctx context.Context, req *LocGroup) (*LocGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocGroup not implemented")
}
func (*UnimplementedModelServiceServer) GetCommandStation(ctx context.Context, req *IDRequest) (*CommandStation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommandStation not implemented")
}
func (*UnimplementedModelServiceServer) UpdateCommandStation(ctx context.Context, req *CommandStation) (*CommandStation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommandStation not implemented")
}
func (*UnimplementedModelServiceServer) GetBlock(ctx context.Context, req *IDRequest) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedModelServiceServer) UpdateBlock(ctx context.Context, req *Block) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlock not implemented")
}
func (*UnimplementedModelServiceServer) GetJunction(ctx context.Context, req *IDRequest) (*Junction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJunction not implemented")
}
func (*UnimplementedModelServiceServer) UpdateJunction(ctx context.Context, req *Junction) (*Junction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJunction not implemented")
}
func (*UnimplementedModelServiceServer) GetOutput(ctx context.Context, req *IDRequest) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutput not implemented")
}
func (*UnimplementedModelServiceServer) UpdateOutput(ctx context.Context, req *Output) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOutput not implemented")
}

func RegisterModelServiceServer(s *grpc.Server, srv ModelServiceServer) {
	s.RegisterService(&_ModelService_serviceDesc, srv)
}

func _ModelService_ParseAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).ParseAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/ParseAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).ParseAddress(ctx, req.(*ParseAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetRailway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetRailway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetRailway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetRailway(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateRailway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Railway)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateRailway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateRailway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateRailway(ctx, req.(*Railway))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).Save(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModule(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModuleBackgroundImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModuleBackgroundImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetModuleBackgroundImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModuleBackgroundImage(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Module)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateModule(ctx, req.(*Module))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetLoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetLoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetLoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetLoc(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateLoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Loc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateLoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateLoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateLoc(ctx, req.(*Loc))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetLocGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetLocGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetLocGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetLocGroup(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateLocGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateLocGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateLocGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateLocGroup(ctx, req.(*LocGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetCommandStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetCommandStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetCommandStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetCommandStation(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateCommandStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandStation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateCommandStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateCommandStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateCommandStation(ctx, req.(*CommandStation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetBlock(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateBlock(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetJunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetJunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetJunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetJunction(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateJunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Junction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateJunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateJunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateJunction(ctx, req.(*Junction))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/GetOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetOutput(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Output)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkyrailways.v1.ModelService/UpdateOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateOutput(ctx, req.(*Output))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "binkyrailways.v1.ModelService",
	HandlerType: (*ModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseAddress",
			Handler:    _ModelService_ParseAddress_Handler,
		},
		{
			MethodName: "GetRailway",
			Handler:    _ModelService_GetRailway_Handler,
		},
		{
			MethodName: "UpdateRailway",
			Handler:    _ModelService_UpdateRailway_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _ModelService_Save_Handler,
		},
		{
			MethodName: "GetModule",
			Handler:    _ModelService_GetModule_Handler,
		},
		{
			MethodName: "GetModuleBackgroundImage",
			Handler:    _ModelService_GetModuleBackgroundImage_Handler,
		},
		{
			MethodName: "UpdateModule",
			Handler:    _ModelService_UpdateModule_Handler,
		},
		{
			MethodName: "GetLoc",
			Handler:    _ModelService_GetLoc_Handler,
		},
		{
			MethodName: "UpdateLoc",
			Handler:    _ModelService_UpdateLoc_Handler,
		},
		{
			MethodName: "GetLocGroup",
			Handler:    _ModelService_GetLocGroup_Handler,
		},
		{
			MethodName: "UpdateLocGroup",
			Handler:    _ModelService_UpdateLocGroup_Handler,
		},
		{
			MethodName: "GetCommandStation",
			Handler:    _ModelService_GetCommandStation_Handler,
		},
		{
			MethodName: "UpdateCommandStation",
			Handler:    _ModelService_UpdateCommandStation_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _ModelService_GetBlock_Handler,
		},
		{
			MethodName: "UpdateBlock",
			Handler:    _ModelService_UpdateBlock_Handler,
		},
		{
			MethodName: "GetJunction",
			Handler:    _ModelService_GetJunction_Handler,
		},
		{
			MethodName: "UpdateJunction",
			Handler:    _ModelService_UpdateJunction_Handler,
		},
		{
			MethodName: "GetOutput",
			Handler:    _ModelService_GetOutput_Handler,
		},
		{
			MethodName: "UpdateOutput",
			Handler:    _ModelService_UpdateOutput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "br_model_service.proto",
}

func (m *IDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParseAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParseAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParseAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParseAddressResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParseAddressResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParseAddressResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FormattedValue) > 0 {
		i -= len(m.FormattedValue)
		copy(dAtA[i:], m.FormattedValue)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.FormattedValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBrModelService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBrModelService(dAtA []byte, offset int, v uint64) int {
	offset -= sovBrModelService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParseAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParseAddressResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	l = len(m.FormattedValue)
	if l > 0 {
		n += 1 + l + sovBrModelService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBrModelService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBrModelService(x uint64) (n int) {
	return sovBrModelService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParseAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParseAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParseAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParseAddressResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParseAddressResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParseAddressResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormattedValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrModelService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBrModelService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FormattedValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrModelService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBrModelService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBrModelService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBrModelService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrModelService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBrModelService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBrModelService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBrModelService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBrModelService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBrModelService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBrModelService = fmt.Errorf("proto: unexpected end of group")
)
