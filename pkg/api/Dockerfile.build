FROM golang:1.22.3-alpine AS protoinstall
ARG TARGETPLATFORM
ARG TARGETARCH

# Install protoc 3.6
RUN apk add -u unzip ca-certificates curl
RUN echo "${TARGETPLATFORM} / ${TARGETARCH}"
RUN curl -L https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-x86_64.zip -o /tmp/protoc-amd64.zip
RUN curl -L https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-aarch_64.zip -o /tmp/protoc-arm64.zip
RUN cd /usr/local/ && unzip /tmp/protoc-${TARGETARCH}.zip

FROM golang:1.22.3
ARG version=1.0.5
ARG TOKEN

ENV DART_CHANNEL=stable
ENV DART_VERSION=2.15.1

RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        dnsutils \
        git \
        openssh-client \
        unzip \
    ; \
    rm -rf /var/lib/apt/lists/*

# Create a minimal runtime environment for executing AOT-compiled Dart code
# with the smallest possible image size.
# usage: COPY --from=dart:xxx /runtime/ /
# uses hard links here to save space
RUN set -eux; \
    case "$(dpkg --print-architecture)" in \
        amd64) \
            TRIPLET="x86_64-linux-gnu" ; \
            FILES="/lib64/ld-linux-x86-64.so.2" ;; \
        armhf) \
            TRIPLET="arm-linux-gnueabihf" ; \
            FILES="/lib/ld-linux-armhf.so.3 \
                /lib/arm-linux-gnueabihf/ld-linux-armhf.so.3";; \
        arm64) \
            TRIPLET="aarch64-linux-gnu" ; \
            FILES="/lib/ld-linux-aarch64.so.1 \
                /lib/aarch64-linux-gnu/ld-linux-aarch64.so.1" ;; \
        *) \
            echo "Unsupported architecture" ; \
            exit 5;; \
    esac; \
    FILES="$FILES \
        /etc/nsswitch.conf \
        /etc/ssl/certs \
        /usr/share/ca-certificates \
        /lib/$TRIPLET/libc.so.6 \
        /lib/$TRIPLET/libdl.so.2 \
        /lib/$TRIPLET/libm.so.6 \
        /lib/$TRIPLET/libnss_dns.so.2 \
        /lib/$TRIPLET/libpthread.so.0 \
        /lib/$TRIPLET/libresolv.so.2 \
        /lib/$TRIPLET/librt.so.1"; \
    for f in $FILES; do \
        dir=$(dirname "$f"); \
        mkdir -p "/runtime$dir"; \
        cp --archive --link --dereference --no-target-directory "$f" "/runtime$f"; \
    done

ENV DART_SDK /usr/lib/dart
ENV PATH $DART_SDK/bin:$PATH

WORKDIR /root
RUN set -eux; \
    case "$(dpkg --print-architecture)" in \
        amd64) \
            SDK_ARCH="x64";; \
        armhf) \
            SDK_ARCH="arm";; \
        arm64) \
            SDK_ARCH="arm64";; \
    esac; \
    SDK="dartsdk-linux-${SDK_ARCH}-release.zip"; \
    BASEURL="https://storage.googleapis.com/dart-archive/channels"; \
    URL="$BASEURL/$DART_CHANNEL/release/$DART_VERSION/sdk/$SDK"; \
    echo "SDK: $URL" >> dart_setup.log ; \
    curl -fLO "$URL"; \
    unzip "$SDK" && mv dart-sdk "$DART_SDK" && rm "$SDK";

RUN ls -al /usr/lib/dart
RUN chmod -R a+rwx /usr/lib/dart

RUN apt-get install -y git curl make sed
COPY --from=protoinstall /usr/local/bin/protoc /usr/local/bin/

# Install go tools
RUN go mod init github.com/binkyrailways/build-image && \
    go install github.com/gogo/protobuf/protoc-gen-gogo@v1.3.2 && \
    go install github.com/gogo/protobuf/protoc-gen-gofast@v1.3.2 && \
    go install github.com/gogo/protobuf/protoc-gen-gogofaster@v1.3.2 && \
    go install golang.org/x/tools/cmd/goimports@v0.20.0 && \
    go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@v2.19.1 && \
    #go get github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger && \
    go install github.com/golang/protobuf/protoc-gen-go@v1.5.4 && \
    go install github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc@v1.5.1

# Install Dart protoc plugin
RUN mkdir -p /dart/cache
ENV PUB_CACHE=/dart/cache
ENV PATH="${PATH}:/usr/lib/dart/bin:/dart/cache/bin"
RUN pub global activate protoc_plugin
RUN cp /dart/cache/bin/* /go/bin/

RUN apt-get install -y bash
RUN sh -c 'chsh -s /bin/bash'

ENV GO111MODULE=off
