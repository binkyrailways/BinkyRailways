<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrIdMissing" xml:space="preserve">
    <value>Id missing</value>
  </data>
  <data name="WarnDescriptionMissing" xml:space="preserve">
    <value>Description missing</value>
  </data>
  <data name="ErrNoJunctionSpecified" xml:space="preserve">
    <value>No junction specified</value>
  </data>
  <data name="ErrFailedToLookupRefWithIdX" xml:space="preserve">
    <value>Failed to lookup entity with id '{0}'</value>
  </data>
  <data name="WarnNoAddressSpecified" xml:space="preserve">
    <value>No address specified</value>
  </data>
  <data name="WarnSlowSpeedHigherThenMedium" xml:space="preserve">
    <value>Slow speed is higher then medium speed</value>
  </data>
  <data name="WarnMaxSpeedLowerThenMedium" xml:space="preserve">
    <value>Maximum speed is lower then medium speed</value>
  </data>
  <data name="WarnNoComPortNameSpecified" xml:space="preserve">
    <value>No COM port name specified</value>
  </data>
  <data name="WarnNegativeXPosition" xml:space="preserve">
    <value>Negative X position</value>
  </data>
  <data name="WarnNegativeYPosition" xml:space="preserve">
    <value>Negative Y position</value>
  </data>
  <data name="WarnHeightToSmall" xml:space="preserve">
    <value>Height to small</value>
  </data>
  <data name="WarnWidthToSmall" xml:space="preserve">
    <value>Width to small</value>
  </data>
  <data name="WarnSwitchDurationVeryHigh" xml:space="preserve">
    <value>Switch duration very high</value>
  </data>
  <data name="WarnNoFromEndPointSpecified" xml:space="preserve">
    <value>No from block/edge specified</value>
  </data>
  <data name="WarnNoToEndPointSpecified" xml:space="preserve">
    <value>No to block/edge specified</value>
  </data>
  <data name="WarnToEndPointEqualsFromEndPoint" xml:space="preserve">
    <value>To block/edge equals from block/edge.</value>
  </data>
  <data name="WarnToBlockIsCrossingBlock" xml:space="preserve">
    <value>To block is listed as crossing block.</value>
  </data>
  <data name="WarnFromBlockIsCrossing" xml:space="preserve">
    <value>From block is listed as crossing block.</value>
  </data>
  <data name="WarnNoReachedDestinationSensorsSpecified" xml:space="preserve">
    <value>No reached destination sensors specified.</value>
  </data>
  <data name="WarnNoSensorsSpecified" xml:space="preserve">
    <value>No sensors specified.</value>
  </data>
  <data name="WarnNoEnteringDestinationSensorsSpecified" xml:space="preserve">
    <value>No entering destination sensors specified.</value>
  </data>
  <data name="TypeNameBinarySensor" xml:space="preserve">
    <value>Binary sensor</value>
  </data>
  <data name="TypeNameBlock" xml:space="preserve">
    <value>Block</value>
  </data>
  <data name="TypeNameEdge" xml:space="preserve">
    <value>Edge</value>
  </data>
  <data name="TypeNameLoc" xml:space="preserve">
    <value>Locomotive</value>
  </data>
  <data name="TypeNameModule" xml:space="preserve">
    <value>Module</value>
  </data>
  <data name="TypeNameRailway" xml:space="preserve">
    <value>Railway</value>
  </data>
  <data name="TypeNameRoute" xml:space="preserve">
    <value>Route</value>
  </data>
  <data name="WarnModuleANotSpecified" xml:space="preserve">
    <value>Module A not specified</value>
  </data>
  <data name="WarnModuleBNotSpecified" xml:space="preserve">
    <value>Module B not specified</value>
  </data>
  <data name="WarnEdgeANotSpecified" xml:space="preserve">
    <value>Edge A not specified</value>
  </data>
  <data name="WarnEdgeBNotSpecified" xml:space="preserve">
    <value>Edge B not specified</value>
  </data>
  <data name="WarnBlockMinWaitTimeGreatThenMaxWaitTime" xml:space="preserve">
    <value>Minimum wait time is larger then maximum wait time</value>
  </data>
  <data name="WarnBlockNoRoutesToOrFromMe" xml:space="preserve">
    <value>No routes to or from this block.</value>
  </data>
  <data name="WarnBlockNoRoutesFromMe" xml:space="preserve">
    <value>No routes leaving this block.</value>
  </data>
  <data name="WarnBlockNoRoutesToMe" xml:space="preserve">
    <value>No routes leading to this block.</value>
  </data>
  <data name="LocAndPredicateTypeName" xml:space="preserve">
    <value>And predicate</value>
  </data>
  <data name="LocOrPredicateTypeName" xml:space="preserve">
    <value>Or predicate</value>
  </data>
  <data name="LocEqualsPredicateTypeName" xml:space="preserve">
    <value>Loc equals predicate</value>
  </data>
  <data name="LocStandardPredicateTypeName" xml:space="preserve">
    <value>Loc standard predicate</value>
  </data>
  <data name="OperatorOr" xml:space="preserve">
    <value> or </value>
  </data>
  <data name="OperatorAnd" xml:space="preserve">
    <value> and </value>
  </data>
  <data name="All" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="AllButX" xml:space="preserve">
    <value>All but {0}</value>
  </data>
  <data name="OnlyX" xml:space="preserve">
    <value>Only {0}</value>
  </data>
  <data name="XExcludingY" xml:space="preserve">
    <value>{0} excluding {1}</value>
  </data>
  <data name="UsedByMemberOfGroup" xml:space="preserve">
    <value>Member of group</value>
  </data>
  <data name="LocGroupEqualsPredicateTypeName" xml:space="preserve">
    <value>Loc in group predicate</value>
  </data>
  <data name="TypeNameLocGroup" xml:space="preserve">
    <value>Locomotive group</value>
  </data>
  <data name="TypeNameLocoBufferCommandStation" xml:space="preserve">
    <value>Locobuffer command station</value>
  </data>
  <data name="TriggerNameActivate" xml:space="preserve">
    <value>Activate</value>
  </data>
  <data name="TriggerNameDeActivate" xml:space="preserve">
    <value>De-activate</value>
  </data>
  <data name="TypeNameDccOverRs232CommandStation" xml:space="preserve">
    <value>DCC over RS232 command station</value>
  </data>
  <data name="TypeNameTurnTable" xml:space="preserve">
    <value>Turntable</value>
  </data>
  <data name="TypeNameBinaryOutput" xml:space="preserve">
    <value>Binary output</value>
  </data>
  <data name="LocChangeChangeDirectionPredicateTypeName" xml:space="preserve">
    <value>Loc can change direction predicate</value>
  </data>
  <data name="LocCanChangeDirectionPredicateDescription" xml:space="preserve">
    <value>Locs that can change direction</value>
  </data>
  <data name="UsedByJunction" xml:space="preserve">
    <value>Block of junction</value>
  </data>
  <data name="UsedBySensor" xml:space="preserve">
    <value>Block of sensor</value>
  </data>
  <data name="UsedByPermission" xml:space="preserve">
    <value>Permission</value>
  </data>
  <data name="UsedByRouteAsFrom" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="UsedByRouteAsTo" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="UsedByRouteAsCrossingJunction" xml:space="preserve">
    <value>Crossing junction</value>
  </data>
  <data name="UsedByRouteAsEnteringSensor" xml:space="preserve">
    <value>Entering destination sensor</value>
  </data>
  <data name="UsedByRouteAsReachedSensor" xml:space="preserve">
    <value>Reached destination sensor</value>
  </data>
  <data name="AddressXIsAlsoUsedInY" xml:space="preserve">
    <value>Address '{0}' is also used in {1}.</value>
  </data>
  <data name="TypeNameSwitch" xml:space="preserve">
    <value>Switch</value>
  </data>
  <data name="TriggerNameDestinationReached" xml:space="preserve">
    <value>Destination reached</value>
  </data>
  <data name="TriggerNameEnteringDestination" xml:space="preserve">
    <value>Entering destination</value>
  </data>
  <data name="UsedByRouteAsOtherSensor" xml:space="preserve">
    <value>Other sensor</value>
  </data>
  <data name="TypeNameInitializeJunctionAction" xml:space="preserve">
    <value>Initialize junction action</value>
  </data>
  <data name="TypeNameClock4StageOutput" xml:space="preserve">
    <value>4-stage clock</value>
  </data>
  <data name="LocTimePredicateTypeName" xml:space="preserve">
    <value>Allowed in a time period</value>
  </data>
  <data name="LocTimePredicateDescriptionXY" xml:space="preserve">
    <value>Between {0} and {1}</value>
  </data>
  <data name="WarningNoHostnameSpecified" xml:space="preserve">
    <value>No hostname specified</value>
  </data>
  <data name="TypeNameEcosCommandStation" xml:space="preserve">
    <value>ECoS command station</value>
  </data>
  <data name="TypeNameBlockGroup" xml:space="preserve">
    <value>Block group</value>
  </data>
  <data name="UsedByBlockAsGroup" xml:space="preserve">
    <value>Used by block</value>
  </data>
  <data name="TypeNameMqttCommandStation" xml:space="preserve">
    <value>MQTT Command station</value>
  </data>
</root>